// Package metronome provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package metronome

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for AddPlanToCustomerPayloadPriceAdjustmentsAdjustmentType.
const (
	AddPlanToCustomerPayloadPriceAdjustmentsAdjustmentTypeFixed      AddPlanToCustomerPayloadPriceAdjustmentsAdjustmentType = "fixed"
	AddPlanToCustomerPayloadPriceAdjustmentsAdjustmentTypeOverride   AddPlanToCustomerPayloadPriceAdjustmentsAdjustmentType = "override"
	AddPlanToCustomerPayloadPriceAdjustmentsAdjustmentTypePercentage AddPlanToCustomerPayloadPriceAdjustmentsAdjustmentType = "percentage"
	AddPlanToCustomerPayloadPriceAdjustmentsAdjustmentTypeQuantity   AddPlanToCustomerPayloadPriceAdjustmentsAdjustmentType = "quantity"
)

// Defines values for AlertStatus.
const (
	AlertStatusArchived AlertStatus = "archived"
	AlertStatusDisabled AlertStatus = "disabled"
	AlertStatusEnabled  AlertStatus = "enabled"
)

// Defines values for AlertType.
const (
	AlertTypeLowCreditBalanceReached             AlertType = "low_credit_balance_reached"
	AlertTypeLowRemainingCreditPercentageReached AlertType = "low_remaining_credit_percentage_reached"
	AlertTypeLowRemainingDaysInPlanReached       AlertType = "low_remaining_days_in_plan_reached"
	AlertTypeSpendThresholdReached               AlertType = "spend_threshold_reached"
	AlertTypeUsageThresholdReached               AlertType = "usage_threshold_reached"
)

// Defines values for AwsRegion.
const (
	AfSouth1     AwsRegion = "af-south-1"
	ApEast1      AwsRegion = "ap-east-1"
	ApNortheast1 AwsRegion = "ap-northeast-1"
	ApNortheast2 AwsRegion = "ap-northeast-2"
	ApNortheast3 AwsRegion = "ap-northeast-3"
	ApSouth1     AwsRegion = "ap-south-1"
	ApSoutheast1 AwsRegion = "ap-southeast-1"
	ApSoutheast2 AwsRegion = "ap-southeast-2"
	CaCentral1   AwsRegion = "ca-central-1"
	CnNorth1     AwsRegion = "cn-north-1"
	CnNorthwest1 AwsRegion = "cn-northwest-1"
	EuCentral1   AwsRegion = "eu-central-1"
	EuNorth1     AwsRegion = "eu-north-1"
	EuSouth1     AwsRegion = "eu-south-1"
	EuWest1      AwsRegion = "eu-west-1"
	EuWest2      AwsRegion = "eu-west-2"
	EuWest3      AwsRegion = "eu-west-3"
	MeSouth1     AwsRegion = "me-south-1"
	SaEast1      AwsRegion = "sa-east-1"
	UsEast1      AwsRegion = "us-east-1"
	UsEast2      AwsRegion = "us-east-2"
	UsGovEast1   AwsRegion = "us-gov-east-1"
	UsGovWest1   AwsRegion = "us-gov-west-1"
	UsWest1      AwsRegion = "us-west-1"
	UsWest2      AwsRegion = "us-west-2"
)

// Defines values for BillingProviderType.
const (
	AwsMarketplace BillingProviderType = "aws_marketplace"
	Stripe         BillingProviderType = "stripe"
)

// Defines values for ChargeType.
const (
	ChargeTypeComposite ChargeType = "composite"
	ChargeTypeFixed     ChargeType = "fixed"
	ChargeTypeMinimum   ChargeType = "minimum"
	ChargeTypeUsage     ChargeType = "usage"
)

// Defines values for CreateCustomerAlertPayloadAlertType.
const (
	CreateCustomerAlertPayloadAlertTypeLowCreditBalanceReached             CreateCustomerAlertPayloadAlertType = "low_credit_balance_reached"
	CreateCustomerAlertPayloadAlertTypeLowRemainingCreditPercentageReached CreateCustomerAlertPayloadAlertType = "low_remaining_credit_percentage_reached"
	CreateCustomerAlertPayloadAlertTypeLowRemainingDaysInPlanReached       CreateCustomerAlertPayloadAlertType = "low_remaining_days_in_plan_reached"
	CreateCustomerAlertPayloadAlertTypeSpendThresholdReached               CreateCustomerAlertPayloadAlertType = "spend_threshold_reached"
	CreateCustomerAlertPayloadAlertTypeUsageThresholdReached               CreateCustomerAlertPayloadAlertType = "usage_threshold_reached"
)

// Defines values for CustomerAlertCustomerStatus.
const (
	Evaluating CustomerAlertCustomerStatus = "evaluating"
	InAlarm    CustomerAlertCustomerStatus = "in_alarm"
	Ok         CustomerAlertCustomerStatus = "ok"
)

// Defines values for EmbeddableDashboardPayloadColorOverridesName.
const (
	GrayDark       EmbeddableDashboardPayloadColorOverridesName = "Gray_dark"
	GrayExtralight EmbeddableDashboardPayloadColorOverridesName = "Gray_extralight"
	GrayLight      EmbeddableDashboardPayloadColorOverridesName = "Gray_light"
	GrayMedium     EmbeddableDashboardPayloadColorOverridesName = "Gray_medium"
	PrimaryLight   EmbeddableDashboardPayloadColorOverridesName = "Primary_light"
	PrimaryMedium  EmbeddableDashboardPayloadColorOverridesName = "Primary_medium"
	White          EmbeddableDashboardPayloadColorOverridesName = "White"
)

// Defines values for EmbeddableDashboardPayloadDashboard.
const (
	Invoices EmbeddableDashboardPayloadDashboard = "invoices"
	Usage    EmbeddableDashboardPayloadDashboard = "usage"
)

// Defines values for ExternalInvoiceStatus.
const (
	DELETED       ExternalInvoiceStatus = "DELETED"
	DRAFT         ExternalInvoiceStatus = "DRAFT"
	FINALIZED     ExternalInvoiceStatus = "FINALIZED"
	PAID          ExternalInvoiceStatus = "PAID"
	PAYMENTFAILED ExternalInvoiceStatus = "PAYMENT_FAILED"
	UNCOLLECTIBLE ExternalInvoiceStatus = "UNCOLLECTIBLE"
	VOID          ExternalInvoiceStatus = "VOID"
)

// Defines values for ListCustomerAlertsPayloadAlertStatuses.
const (
	ListCustomerAlertsPayloadAlertStatusesARCHIVED  ListCustomerAlertsPayloadAlertStatuses = "ARCHIVED"
	ListCustomerAlertsPayloadAlertStatusesArchived  ListCustomerAlertsPayloadAlertStatuses = "archived"
	ListCustomerAlertsPayloadAlertStatusesArchived1 ListCustomerAlertsPayloadAlertStatuses = "Archived"
	ListCustomerAlertsPayloadAlertStatusesDISABLED  ListCustomerAlertsPayloadAlertStatuses = "DISABLED"
	ListCustomerAlertsPayloadAlertStatusesDisabled  ListCustomerAlertsPayloadAlertStatuses = "disabled"
	ListCustomerAlertsPayloadAlertStatusesDisabled1 ListCustomerAlertsPayloadAlertStatuses = "Disabled"
	ListCustomerAlertsPayloadAlertStatusesENABLED   ListCustomerAlertsPayloadAlertStatuses = "ENABLED"
	ListCustomerAlertsPayloadAlertStatusesEnabled   ListCustomerAlertsPayloadAlertStatuses = "enabled"
	ListCustomerAlertsPayloadAlertStatusesEnabled1  ListCustomerAlertsPayloadAlertStatuses = "Enabled"
)

// Defines values for ManagedEntity.
const (
	ManagedEntityCharge      ManagedEntity = "charge"
	ManagedEntityCreditGrant ManagedEntity = "credit_grant"
	ManagedEntityCustomer    ManagedEntity = "customer"
	ManagedEntityProduct     ManagedEntity = "product"
)

// Defines values for PagedUsageQueryPayloadWindowSize.
const (
	PagedUsageQueryPayloadWindowSizeDAY   PagedUsageQueryPayloadWindowSize = "DAY"
	PagedUsageQueryPayloadWindowSizeDay   PagedUsageQueryPayloadWindowSize = "day"
	PagedUsageQueryPayloadWindowSizeDay1  PagedUsageQueryPayloadWindowSize = "Day"
	PagedUsageQueryPayloadWindowSizeHOUR  PagedUsageQueryPayloadWindowSize = "HOUR"
	PagedUsageQueryPayloadWindowSizeHour  PagedUsageQueryPayloadWindowSize = "hour"
	PagedUsageQueryPayloadWindowSizeHour1 PagedUsageQueryPayloadWindowSize = "Hour"
	PagedUsageQueryPayloadWindowSizeNONE  PagedUsageQueryPayloadWindowSize = "NONE"
	PagedUsageQueryPayloadWindowSizeNone  PagedUsageQueryPayloadWindowSize = "none"
	PagedUsageQueryPayloadWindowSizeNone1 PagedUsageQueryPayloadWindowSize = "None"
)

// Defines values for PlanChargeUnitConversionRoundingBehavior.
const (
	Ceiling PlanChargeUnitConversionRoundingBehavior = "ceiling"
	Floor   PlanChargeUnitConversionRoundingBehavior = "floor"
)

// Defines values for PriceAdjustmentPricesAdjustmentType.
const (
	Fixed      PriceAdjustmentPricesAdjustmentType = "fixed"
	Override   PriceAdjustmentPricesAdjustmentType = "override"
	Percentage PriceAdjustmentPricesAdjustmentType = "percentage"
	Quantity   PriceAdjustmentPricesAdjustmentType = "quantity"
)

// Defines values for StripeCollectionMethod.
const (
	ChargeAutomatically StripeCollectionMethod = "charge_automatically"
	SendInvoice         StripeCollectionMethod = "send_invoice"
)

// Defines values for UsageBatchQueryPayloadWindowSize.
const (
	UsageBatchQueryPayloadWindowSizeDAY   UsageBatchQueryPayloadWindowSize = "DAY"
	UsageBatchQueryPayloadWindowSizeDay   UsageBatchQueryPayloadWindowSize = "day"
	UsageBatchQueryPayloadWindowSizeDay1  UsageBatchQueryPayloadWindowSize = "Day"
	UsageBatchQueryPayloadWindowSizeHOUR  UsageBatchQueryPayloadWindowSize = "HOUR"
	UsageBatchQueryPayloadWindowSizeHour  UsageBatchQueryPayloadWindowSize = "hour"
	UsageBatchQueryPayloadWindowSizeHour1 UsageBatchQueryPayloadWindowSize = "Hour"
	UsageBatchQueryPayloadWindowSizeNONE  UsageBatchQueryPayloadWindowSize = "NONE"
	UsageBatchQueryPayloadWindowSizeNone  UsageBatchQueryPayloadWindowSize = "none"
	UsageBatchQueryPayloadWindowSizeNone1 UsageBatchQueryPayloadWindowSize = "None"
)

// AddPlanToCustomerPayload defines model for AddPlanToCustomerPayload.
type AddPlanToCustomerPayload struct {
	// EndingBefore RFC 3339 timestamp for when the plan ends (exclusive) for this customer. Must be at 0:00 UTC (midnight).
	EndingBefore *time.Time `json:"ending_before,omitempty"`

	// NetPaymentTermsDays Number of days after issuance of invoice after which the invoice is due (e.g. Net 30).
	NetPaymentTermsDays *float32           `json:"net_payment_terms_days,omitempty"`
	PlanId              openapi_types.UUID `json:"plan_id"`

	// PriceAdjustments A list of price adjustments can be applied on top of the pricing in the plans. See the [price adjustments documentation](https://docs.metronome.com/pricing/managing-plans/#price-adjustments) for details.
	PriceAdjustments *[]struct {
		AdjustmentType AddPlanToCustomerPayloadPriceAdjustmentsAdjustmentType `json:"adjustment_type"`
		ChargeId       openapi_types.UUID                                     `json:"charge_id"`

		// Quantity the overridden quantity for a fixed charge
		Quantity *float32 `json:"quantity,omitempty"`

		// StartPeriod Used in price ramps.  Indicates how many billing periods pass before the charge applies.
		StartPeriod float32 `json:"start_period"`

		// Tier Used in pricing tiers.  Indicates at what metric value the price applies.
		Tier *float32 `json:"tier,omitempty"`

		// Value The amount of change to a price. Percentage and fixed adjustments can be positive or negative. Percentage-based adjustments should be decimals, e.g. -0.05 for a 5% discount.
		Value *float32 `json:"value,omitempty"`
	} `json:"price_adjustments,omitempty"`

	// StartingOn RFC 3339 timestamp for when the plan becomes active for this customer. Must be at 0:00 UTC (midnight).
	StartingOn time.Time `json:"starting_on"`
}

// AddPlanToCustomerPayloadPriceAdjustmentsAdjustmentType defines model for AddPlanToCustomerPayload.PriceAdjustments.AdjustmentType.
type AddPlanToCustomerPayloadPriceAdjustmentsAdjustmentType string

// Alert defines model for Alert.
type Alert struct {
	CreditType CreditType `json:"credit_type"`

	// Id the Metronome ID of the alert
	Id string `json:"id"`

	// Name Name of the alert
	Name string `json:"name"`

	// Status Status of the alert
	Status AlertStatus `json:"status"`

	// Threshold Threshold value of the alert policy
	Threshold float32 `json:"threshold"`

	// Type Type of the alert
	Type AlertType `json:"type"`

	// UpdatedAt Timestamp for when the alert was last updated
	UpdatedAt time.Time `json:"updated_at"`
}

// AlertStatus Status of the alert
type AlertStatus string

// AlertType Type of the alert
type AlertType string

// AwsExpirationDate Contract expiration date for the customer. The expected format is RFC 3339 and can be retrieved from AWS's GetEntitlements API. (See https://docs.aws.amazon.com/marketplaceentitlement/latest/APIReference/API_GetEntitlements.html.)
type AwsExpirationDate = time.Time

// AwsRegion defines model for AwsRegion.
type AwsRegion string

// BillableMetric defines model for BillableMetric.
type BillableMetric struct {
	GroupBy *[]string          `json:"group_by,omitempty"`
	Id      openapi_types.UUID `json:"id"`
	Name    string             `json:"name"`
}

// BillingProviderType defines model for BillingProviderType.
type BillingProviderType string

// ChargeType defines model for ChargeType.
type ChargeType string

// Costs defines model for Costs.
type Costs struct {
	CreditTypes    CostsPerCreditType `json:"credit_types"`
	EndTimestamp   time.Time          `json:"end_timestamp"`
	StartTimestamp time.Time          `json:"start_timestamp"`
}

// CostsPerCreditType defines model for CostsPerCreditType.
type CostsPerCreditType map[string]struct {
	Cost              *float32             `json:"cost,omitempty"`
	LineItemBreakdown *[]LineItemBreakdown `json:"line_item_breakdown,omitempty"`
	Name              *string              `json:"name,omitempty"`
}

// CreateCreditGrantPayload defines model for CreateCreditGrantPayload.
type CreateCreditGrantPayload struct {
	// CustomerId the Metronome ID of the customer
	CustomerId openapi_types.UUID `json:"customer_id"`

	// EffectiveAt The credit grant will only apply to billing periods that end at or after this timestamp.
	EffectiveAt *time.Time `json:"effective_at,omitempty"`

	// ExpiresAt The credit grant will only apply to billing periods that end before this timestamp.
	ExpiresAt time.Time `json:"expires_at"`

	// GrantAmount the amount of credits granted
	GrantAmount struct {
		Amount       float32            `json:"amount"`
		CreditTypeId openapi_types.UUID `json:"credit_type_id"`
	} `json:"grant_amount"`

	// InvoiceDate The date to issue an invoice for the paid_amount.
	InvoiceDate *time.Time `json:"invoice_date,omitempty"`

	// Name the name of the credit grant as it will appear on invoices
	Name string `json:"name"`

	// PaidAmount the amount paid for this credit grant
	PaidAmount struct {
		Amount       float32            `json:"amount"`
		CreditTypeId openapi_types.UUID `json:"credit_type_id"`
	} `json:"paid_amount"`
	Priority float32 `json:"priority"`

	// ProductIds The product(s) which these credits will be applied to. (If unspecified, the credits will be applied to charges for all products.). The array ordering specified here will be used to determine the order in which credits will be applied to invoice line items
	ProductIds *[]openapi_types.UUID `json:"product_ids,omitempty"`
	Reason     *string               `json:"reason,omitempty"`
}

// CreateCustomerAlertPayload defines model for CreateCustomerAlertPayload.
type CreateCustomerAlertPayload struct {
	// AlertType Type of the alert
	AlertType CreateCustomerAlertPayloadAlertType `json:"alert_type"`

	// BillableMetricId For alerts of type `usage_threshold_reached`, specifies which billable metric to track the usage for.
	BillableMetricId *openapi_types.UUID `json:"billable_metric_id,omitempty"`
	CreditTypeId     *openapi_types.UUID `json:"credit_type_id,omitempty"`

	// CustomerId If provided, will create this alert for this specific customer. To create an alert for all customers, do not specify `customer_id` or `plan_id`.
	CustomerId *openapi_types.UUID `json:"customer_id,omitempty"`

	// Name Name of the alert
	Name string `json:"name"`

	// PlanId If provided, will create this alert for this specific plan. To create an alert for all customers, do not specify `customer_id` or `plan_id`.
	PlanId *openapi_types.UUID `json:"plan_id,omitempty"`

	// Threshold Threshold value of the alert policy
	Threshold float32 `json:"threshold"`
}

// CreateCustomerAlertPayloadAlertType Type of the alert
type CreateCustomerAlertPayloadAlertType string

// CreateCustomerPayload defines model for CreateCustomerPayload.
type CreateCustomerPayload struct {
	BillingConfig *struct {
		AwsProductCode            *string                 `json:"aws_product_code,omitempty"`
		AwsRegion                 *AwsRegion              `json:"aws_region,omitempty"`
		BillingProviderCustomerId string                  `json:"billing_provider_customer_id"`
		BillingProviderType       BillingProviderType     `json:"billing_provider_type"`
		StripeCollectionMethod    *StripeCollectionMethod `json:"stripe_collection_method,omitempty"`
	} `json:"billing_config,omitempty"`

	// ExternalId (deprecated, use ingest_aliases instead) the first ID (Metronome ID or ingest alias) that can be used in usage events
	ExternalId *string `json:"external_id,omitempty"`

	// IngestAliases Aliases that can be used to refer to this customer in usage events
	IngestAliases *[]string `json:"ingest_aliases,omitempty"`
	Name          string    `json:"name"`
}

// CreditGrant defines model for CreditGrant.
type CreditGrant struct {
	// Balance The effective balance of the grant as of the end of the customer's current billing period. Expiration deductions will be included only if the grant expires before the end of the current billing period.
	Balance struct {
		// EffectiveAt The end_date of the customer's current billing period.
		EffectiveAt time.Time `json:"effective_at"`

		// ExcludingPending The grant's current balance including all posted deductions. If the grant has expired, this amount will be 0.
		ExcludingPending float32 `json:"excluding_pending"`

		// IncludingPending The grant's current balance including all posted and pending deductions. If the grant expires before the end of the customer's current billing period, this amount will be 0.
		IncludingPending float32 `json:"including_pending"`
	} `json:"balance"`
	CustomFields CustomField `json:"custom_fields"`

	// CustomerId the Metronome ID of the customer
	CustomerId  openapi_types.UUID  `json:"customer_id"`
	Deductions  []CreditLedgerEntry `json:"deductions"`
	EffectiveAt time.Time           `json:"effective_at"`
	ExpiresAt   time.Time           `json:"expires_at"`

	// GrantAmount the amount of credits initially granted
	GrantAmount struct {
		Amount     float32    `json:"amount"`
		CreditType CreditType `json:"credit_type"`
	} `json:"grant_amount"`

	// Id the Metronome ID of the credit grant
	Id openapi_types.UUID `json:"id"`

	// InvoiceId the Metronome ID of the invoice with the purchase charge for this credit grant, if applicable
	InvoiceId *openapi_types.UUID `json:"invoice_id"`
	Name      string              `json:"name"`

	// PaidAmount the amount paid for this credit grant
	PaidAmount struct {
		Amount     float32    `json:"amount"`
		CreditType CreditType `json:"credit_type"`
	} `json:"paid_amount"`
	PendingDeductions []CreditLedgerEntry `json:"pending_deductions"`
	Priority          float32             `json:"priority"`

	// Products The products which these credits will be applied to. (If unspecified, the credits will be applied to charges for all products.)
	Products *[]struct {
		Id   string `json:"id"`
		Name string `json:"name"`
	} `json:"products,omitempty"`
	Reason *string `json:"reason"`
}

// CreditLedgerEntriesQueryPayload defines model for CreditLedgerEntriesQueryPayload.
type CreditLedgerEntriesQueryPayload struct {
	// CreditTypeIds A list of Metronome credit type IDs to fetch ledger entries for. If absent, ledger entries for all credit types will be returned.
	CreditTypeIds *[]openapi_types.UUID `json:"credit_type_ids,omitempty"`

	// CustomerIds A list of Metronome customer IDs to fetch ledger entries for. If absent, ledger entries for all customers will be returned.
	CustomerIds *[]openapi_types.UUID `json:"customer_ids,omitempty"`

	// EndingBefore If supplied, ledger entries will only be returned with an effective_at before this time. This timestamp must not be in the future. If no timestamp is supplied, all entries up to the start of the customer's next billing period will be returned.
	EndingBefore *time.Time `json:"ending_before,omitempty"`

	// StartingOn If supplied, only ledger entries effective at or after this time will be returned.
	StartingOn *time.Time `json:"starting_on,omitempty"`
}

// CreditLedgerEntry defines model for CreditLedgerEntry.
type CreditLedgerEntry struct {
	// Amount an amount representing the change to the customer's credit balance
	Amount    float32 `json:"amount"`
	CreatedBy string  `json:"created_by"`

	// CreditGrantId the credit grant this entry is related to
	CreditGrantId openapi_types.UUID `json:"credit_grant_id"`
	EffectiveAt   time.Time          `json:"effective_at"`

	// InvoiceId if this entry is a deduction, the Metronome ID of the invoice where the credit deduction was consumed; if this entry is a grant, the Metronome ID of the invoice where the grant's paid_amount was charged
	InvoiceId *openapi_types.UUID `json:"invoice_id"`
	Reason    string              `json:"reason"`

	// RunningBalance the running balance for this credit type at the time of the ledger entry, including all preceding charges
	RunningBalance float32 `json:"running_balance"`
}

// CreditType defines model for CreditType.
type CreditType struct {
	Id   openapi_types.UUID `json:"id"`
	Name string             `json:"name"`
}

// CreditTypeLedger defines model for CreditTypeLedger.
type CreditTypeLedger struct {
	CreditType CreditType `json:"credit_type"`

	// EndingBalance the effective balances at the end of the specified time window
	EndingBalance struct {
		// EffectiveAt the ending_before request parameter (if supplied) or the current billing period's end date
		EffectiveAt time.Time `json:"effective_at"`

		// ExcludingPending the ending balance, including the balance of all grants that have not expired before the effective_at date and deductions that happened before the effective_at date
		ExcludingPending float32 `json:"excluding_pending"`

		// IncludingPending the excluding_pending balance plus any pending invoice deductions and expirations that will happen by the effective_at date
		IncludingPending float32 `json:"including_pending"`
	} `json:"ending_balance"`
	Entries         []CreditLedgerEntry `json:"entries"`
	PendingEntries  []CreditLedgerEntry `json:"pending_entries"`
	StartingBalance struct {
		// EffectiveAt the starting_on request parameter (if supplied) or the first credit grant's effective_at date
		EffectiveAt time.Time `json:"effective_at"`

		// ExcludingPending the starting balance, including all posted grants, deductions, and expirations that happened at or before the effective_at timestamp
		ExcludingPending float32 `json:"excluding_pending"`

		// IncludingPending the excluding_pending balance plus any pending activity that has not been posted at the time of the query
		IncludingPending float32 `json:"including_pending"`
	} `json:"starting_balance"`
}

// CustomField defines model for CustomField.
type CustomField map[string]string

// Customer defines model for Customer.
type Customer struct {
	// ExternalId (deprecated, use ingest_aliases instead) the first ID (Metronome or ingest alias) that can be used in usage events
	ExternalId string `json:"external_id"`

	// Id the Metronome ID of the customer
	Id openapi_types.UUID `json:"id"`

	// IngestAliases aliases for this customer that can be used instead of the Metronome customer ID in usage events
	IngestAliases []string `json:"ingest_aliases"`
	Name          string   `json:"name"`
}

// CustomerAlert defines model for CustomerAlert.
type CustomerAlert struct {
	Alert Alert `json:"alert"`

	// CustomerStatus The status of the customer alert. If the alert is archived, null will be returned.
	CustomerStatus *CustomerAlertCustomerStatus `json:"customer_status"`
}

// CustomerAlertCustomerStatus The status of the customer alert. If the alert is archived, null will be returned.
type CustomerAlertCustomerStatus string

// CustomerConfig defines model for CustomerConfig.
type CustomerConfig struct {
	// SalesforceAccountId The Salesforce account ID for the customer
	SalesforceAccountId *string `json:"salesforce_account_id"`
}

// CustomerConfigPayload defines model for CustomerConfigPayload.
type CustomerConfigPayload struct {
	// SalesforceAccountId The Salesforce account ID for the customer
	SalesforceAccountId *string `json:"salesforce_account_id"`
}

// CustomerCreditTypeLedger defines model for CustomerCreditTypeLedger.
type CustomerCreditTypeLedger struct {
	CustomerId openapi_types.UUID `json:"customer_id"`
	Ledgers    []CreditTypeLedger `json:"ledgers"`
}

// CustomerDetail defines model for CustomerDetail.
type CustomerDetail struct {
	CustomFields   CustomField    `json:"custom_fields"`
	CustomerConfig CustomerConfig `json:"customer_config"`

	// ExternalId (deprecated, use ingest_aliases instead) the first ID (Metronome or ingest alias) that can be used in usage events
	ExternalId string `json:"external_id"`

	// Id the Metronome ID of the customer
	Id openapi_types.UUID `json:"id"`

	// IngestAliases aliases for this customer that can be used instead of the Metronome customer ID in usage events
	IngestAliases []string `json:"ingest_aliases"`
	Name          string   `json:"name"`
}

// CustomerPlan defines model for CustomerPlan.
type CustomerPlan struct {
	EndingBefore        *time.Time         `json:"ending_before,omitempty"`
	Id                  openapi_types.UUID `json:"id"`
	NetPaymentTermsDays *float32           `json:"net_payment_terms_days,omitempty"`
	PlanId              openapi_types.UUID `json:"plan_id"`
	PlanName            string             `json:"plan_name"`
	StartingOn          time.Time          `json:"starting_on"`
	TrialInfo           *struct {
		EndingBefore string `json:"ending_before"`
		SpendingCaps []struct {
			Amount          float32    `json:"amount"`
			AmountRemaining float32    `json:"amount_remaining"`
			CreditType      CreditType `json:"credit_type"`
		} `json:"spending_caps"`
	} `json:"trial_info,omitempty"`
}

// EmbeddableDashboardPayload defines model for EmbeddableDashboardPayload.
type EmbeddableDashboardPayload struct {
	// ColorOverrides Optional list of colors to override
	ColorOverrides *[]struct {
		// Name The color to override
		Name *EmbeddableDashboardPayloadColorOverridesName `json:"name,omitempty"`

		// Value Hex value representation of the color
		Value *string `json:"value,omitempty"`
	} `json:"color_overrides,omitempty"`
	CustomerId openapi_types.UUID `json:"customer_id"`

	// Dashboard The type of dashboard to retrieve.
	Dashboard EmbeddableDashboardPayloadDashboard `json:"dashboard"`

	// DashboardOptions Optional dashboard specific options
	DashboardOptions *[]struct {
		// Key The option key name
		Key string `json:"key"`

		// Value The option value
		Value string `json:"value"`
	} `json:"dashboard_options,omitempty"`
}

// EmbeddableDashboardPayloadColorOverridesName The color to override
type EmbeddableDashboardPayloadColorOverridesName string

// EmbeddableDashboardPayloadDashboard The type of dashboard to retrieve.
type EmbeddableDashboardPayloadDashboard string

// EndCustomerPlanPayload defines model for EndCustomerPlanPayload.
type EndCustomerPlanPayload struct {
	// EndingBefore RFC 3339 timestamp for when the plan ends (exclusive) for this customer. Must be at 0:00 UTC (midnight).
	EndingBefore time.Time `json:"ending_before"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// Event defines model for Event.
type Event struct {
	CustomerId string                  `json:"customer_id"`
	EventType  string                  `json:"event_type"`
	Properties *map[string]interface{} `json:"properties,omitempty"`

	// Timestamp RFC 3339 formatted
	Timestamp     string `json:"timestamp"`
	TransactionId string `json:"transaction_id"`
}

// ExternalInvoice defines model for ExternalInvoice.
type ExternalInvoice struct {
	BillingProviderType BillingProviderType    `json:"billing_provider_type"`
	ExternalStatus      *ExternalInvoiceStatus `json:"external_status,omitempty"`
	InvoiceId           string                 `json:"invoice_id"`
	IssuedAtTimestamp   time.Time              `json:"issued_at_timestamp"`
}

// ExternalInvoiceStatus defines model for ExternalInvoiceStatus.
type ExternalInvoiceStatus string

// GetCustomerAlertPayload defines model for GetCustomerAlertPayload.
type GetCustomerAlertPayload struct {
	// AlertId The Metronome ID of the alert
	AlertId openapi_types.UUID `json:"alert_id"`

	// CustomerId The Metronome ID of the customer
	CustomerId openapi_types.UUID `json:"customer_id"`
}

// Id defines model for Id.
type Id struct {
	Id openapi_types.UUID `json:"id"`
}

// Invoice defines model for Invoice.
type Invoice struct {
	CreditType CreditType         `json:"credit_type"`
	CustomerId openapi_types.UUID `json:"customer_id"`

	// EndTimestamp End of the usage period this invoice covers (UTC)
	EndTimestamp       time.Time           `json:"end_timestamp"`
	ExternalInvoice    *ExternalInvoice    `json:"external_invoice,omitempty"`
	Id                 openapi_types.UUID  `json:"id"`
	InvoiceAdjustments []InvoiceAdjustment `json:"invoice_adjustments"`
	LineItems          []InvoiceLineItem   `json:"line_items"`
	PlanId             *openapi_types.UUID `json:"plan_id,omitempty"`
	PlanName           *string             `json:"plan_name,omitempty"`

	// StartTimestamp Beginning of the usage period this invoice covers (UTC)
	StartTimestamp time.Time     `json:"start_timestamp"`
	Status         InvoiceStatus `json:"status"`
	Subtotal       float32       `json:"subtotal"`
	Total          float32       `json:"total"`
}

// InvoiceAdjustment defines model for InvoiceAdjustment.
type InvoiceAdjustment struct {
	CreditType CreditType `json:"credit_type"`
	Name       string     `json:"name"`
	Total      float32    `json:"total"`
}

// InvoiceLineItem defines model for InvoiceLineItem.
type InvoiceLineItem struct {
	CreditType   CreditType           `json:"credit_type"`
	CustomFields CustomField          `json:"custom_fields"`
	GroupKey     *string              `json:"group_key,omitempty"`
	GroupValue   *string              `json:"group_value,omitempty"`
	Name         string               `json:"name"`
	ProductId    *openapi_types.UUID  `json:"product_id,omitempty"`
	Quantity     float32              `json:"quantity"`
	SubLineItems []InvoiceSubLineItem `json:"sub_line_items"`
	Total        float32              `json:"total"`
}

// InvoiceStatus defines model for InvoiceStatus.
type InvoiceStatus = string

// InvoiceSubLineItem defines model for InvoiceSubLineItem.
type InvoiceSubLineItem struct {
	ChargeId     *openapi_types.UUID `json:"charge_id,omitempty"`
	CustomFields CustomField         `json:"custom_fields"`
	Name         string              `json:"name"`

	// Price the unit price for this charge, present only if the charge is not tiered and the quantity is nonzero
	Price    *float32       `json:"price,omitempty"`
	Quantity float32        `json:"quantity"`
	Subtotal float32        `json:"subtotal"`
	Tiers    *[]InvoiceTier `json:"tiers,omitempty"`
}

// InvoiceTier defines model for InvoiceTier.
type InvoiceTier struct {
	Price    float32 `json:"price"`
	Quantity float32 `json:"quantity"`

	// StartingAt at what metric amount this tier begins
	StartingAt float32 `json:"starting_at"`
	Subtotal   float32 `json:"subtotal"`
}

// LineItemBreakdown defines model for LineItemBreakdown.
type LineItemBreakdown struct {
	Cost       float32 `json:"cost"`
	GroupKey   *string `json:"group_key,omitempty"`
	GroupValue *string `json:"group_value"`
	Name       string  `json:"name"`
}

// ListCreditGrantPayload defines model for ListCreditGrantPayload.
type ListCreditGrantPayload struct {
	// CreditGrantIds An array of credit grant IDs. If this is specified, neither credit_type_ids nor customer_ids may be specified.
	CreditGrantIds *[]openapi_types.UUID `json:"credit_grant_ids,omitempty"`

	// CreditTypeIds An array of credit type IDs. This must not be specified if credit_grant_ids is specified.
	CreditTypeIds *[]openapi_types.UUID `json:"credit_type_ids,omitempty"`

	// CustomerIds An array of Metronome customer IDs. This must not be specified if credit_grant_ids is specified.
	CustomerIds *[]openapi_types.UUID `json:"customer_ids,omitempty"`

	// EffectiveBefore Only return credit grants that are effective before this timestamp (exclusive).
	EffectiveBefore *time.Time `json:"effective_before,omitempty"`

	// NotExpiringBefore Only return credit grants that expire at or after this timestamp.
	NotExpiringBefore *time.Time `json:"not_expiring_before,omitempty"`
}

// ListCustomerAlertsPayload defines model for ListCustomerAlertsPayload.
type ListCustomerAlertsPayload struct {
	// AlertStatuses Optionally filter by alert status. If absent, only enabled alerts will be returned.
	AlertStatuses *[]ListCustomerAlertsPayloadAlertStatuses `json:"alert_statuses,omitempty"`

	// CustomerId The Metronome ID of the customer
	CustomerId openapi_types.UUID `json:"customer_id"`
}

// ListCustomerAlertsPayloadAlertStatuses defines model for ListCustomerAlertsPayload.AlertStatuses.
type ListCustomerAlertsPayloadAlertStatuses string

// ManagedEntity defines model for ManagedEntity.
type ManagedEntity string

// PagedUsageAggregate defines model for PagedUsageAggregate.
type PagedUsageAggregate struct {
	EndingBefore time.Time `json:"ending_before"`
	GroupKey     *string   `json:"group_key"`
	GroupValue   *string   `json:"group_value"`
	StartingOn   time.Time `json:"starting_on"`
	Value        *float32  `json:"value"`
}

// PagedUsageQueryPayload defines model for PagedUsageQueryPayload.
type PagedUsageQueryPayload struct {
	BillableMetricId openapi_types.UUID `json:"billable_metric_id"`

	// CurrentPeriod If true, will return the usage for the current billing period. Will return an error if the customer is currently uncontracted or starting_on and ending_before are specified when this is true.
	CurrentPeriod *bool              `json:"current_period,omitempty"`
	CustomerId    openapi_types.UUID `json:"customer_id"`
	EndingBefore  *time.Time         `json:"ending_before,omitempty"`
	GroupBy       *struct {
		// Key The name of the group_by key to use
		Key string `json:"key"`

		// Values Values of the group_by key to return in the query. Omit this if you'd like all values for the key returned.
		Values *[]string `json:"values,omitempty"`
	} `json:"group_by,omitempty"`
	StartingOn *time.Time `json:"starting_on,omitempty"`

	// WindowSize A window_size of "day" or "hour" will return the usage for the specified period segmented into daily or hourly aggregates. A window_size of "none" will return a single usage aggregate for the entirety of the specified period.
	WindowSize PagedUsageQueryPayloadWindowSize `json:"window_size"`
}

// PagedUsageQueryPayloadWindowSize A window_size of "day" or "hour" will return the usage for the specified period segmented into daily or hourly aggregates. A window_size of "none" will return a single usage aggregate for the entirety of the specified period.
type PagedUsageQueryPayloadWindowSize string

// Plan defines model for Plan.
type Plan struct {
	Description string             `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	Name        string             `json:"name"`
}

// PlanCharge defines model for PlanCharge.
type PlanCharge struct {
	ChargeType   ChargeType         `json:"charge_type"`
	CreditType   CreditType         `json:"credit_type"`
	CustomFields CustomField        `json:"custom_fields"`
	Id           openapi_types.UUID `json:"id"`
	Name         string             `json:"name"`
	Prices       []struct {
		CollectionInterval *float32 `json:"collection_interval,omitempty"`
		CollectionSchedule *string  `json:"collection_schedule,omitempty"`
		Quantity           *float32 `json:"quantity,omitempty"`

		// Tier Used in pricing tiers.  Indicates at what metric value the price applies.
		Tier  float32 `json:"tier"`
		Value float32 `json:"value"`
	} `json:"prices"`
	ProductName string   `json:"product_name"`
	Quantity    *float32 `json:"quantity,omitempty"`

	// StartPeriod Used in price ramps.  Indicates how many billing periods pass before the charge applies.
	StartPeriod *float32 `json:"start_period,omitempty"`

	// UnitConversion Specifies how quantities for usage based charges will be converted.
	UnitConversion *struct {
		// DivisionFactor The conversion factor
		DivisionFactor float32 `json:"division_factor"`

		// RoundingBehavior Whether usage should be rounded down or up to the nearest whole number. If null, quantity will be rounded to 20 decimal places.
		RoundingBehavior *PlanChargeUnitConversionRoundingBehavior `json:"rounding_behavior,omitempty"`
	} `json:"unit_conversion,omitempty"`
}

// PlanChargeUnitConversionRoundingBehavior Whether usage should be rounded down or up to the nearest whole number. If null, quantity will be rounded to 20 decimal places.
type PlanChargeUnitConversionRoundingBehavior string

// PlanDetail defines model for PlanDetail.
type PlanDetail struct {
	CreditGrants *[]struct {
		AmountGranted           float32    `json:"amount_granted"`
		AmountGrantedCreditType CreditType `json:"amount_granted_credit_type"`
		AmountPaid              float32    `json:"amount_paid"`
		AmountPaidCreditType    CreditType `json:"amount_paid_credit_type"`
		EffectiveDuration       float32    `json:"effective_duration"`
		Name                    string     `json:"name"`
		Priority                string     `json:"priority"`
		Reason                  *string    `json:"reason,omitempty"`
		RecurrenceDuration      *float32   `json:"recurrence_duration,omitempty"`
		RecurrenceInterval      *float32   `json:"recurrence_interval,omitempty"`
		SendInvoice             bool       `json:"send_invoice"`
	} `json:"credit_grants,omitempty"`
	Description *string            `json:"description,omitempty"`
	Id          openapi_types.UUID `json:"id"`
	Minimums    *[]struct {
		CreditType CreditType `json:"credit_type"`
		Name       string     `json:"name"`

		// StartPeriod Used in price ramps.  Indicates how many billing periods pass before the charge applies.
		StartPeriod float32 `json:"start_period"`
		Value       float32 `json:"value"`
	} `json:"minimums,omitempty"`
	Name string `json:"name"`
}

// PriceAdjustment defines model for PriceAdjustment.
type PriceAdjustment struct {
	ChargeId   openapi_types.UUID `json:"charge_id"`
	ChargeType ChargeType         `json:"charge_type"`
	Prices     []struct {
		// AdjustmentType Determines how the value will be applied.
		AdjustmentType PriceAdjustmentPricesAdjustmentType `json:"adjustment_type"`

		// Tier Used in pricing tiers.  Indicates at what metric value the price applies.
		Tier  *float32 `json:"tier,omitempty"`
		Value *float32 `json:"value,omitempty"`
	} `json:"prices"`
	Quantity    *float32 `json:"quantity,omitempty"`
	StartPeriod float32  `json:"start_period"`
}

// PriceAdjustmentPricesAdjustmentType Determines how the value will be applied.
type PriceAdjustmentPricesAdjustmentType string

// SetCustomerNamePayload defines model for SetCustomerNamePayload.
type SetCustomerNamePayload struct {
	// Name The new name for the customer
	Name string `json:"name"`
}

// SetIngestAliasesPayload defines model for SetIngestAliasesPayload.
type SetIngestAliasesPayload struct {
	IngestAliases []string `json:"ingest_aliases"`
}

// StripeCollectionMethod defines model for StripeCollectionMethod.
type StripeCollectionMethod string

// UsageBatchAggregate defines model for UsageBatchAggregate.
type UsageBatchAggregate struct {
	BillableMetricId   openapi_types.UUID `json:"billable_metric_id"`
	BillableMetricName string             `json:"billable_metric_name"`
	CustomerId         openapi_types.UUID `json:"customer_id"`
	EndTimestamp       time.Time          `json:"end_timestamp"`

	// Groups Values will be either a number or null. Null indicates that there were no matches for the group_by value.
	Groups         *map[string]float32 `json:"groups,omitempty"`
	StartTimestamp time.Time           `json:"start_timestamp"`
	Value          *float32            `json:"value"`
}

// UsageBatchQueryPayload defines model for UsageBatchQueryPayload.
type UsageBatchQueryPayload struct {
	// BillableMetrics A list of billable metrics to fetch usage for. If absent, all billable metrics will be returned.
	BillableMetrics *[]struct {
		GroupBy *struct {
			// Key The name of the group_by key to use
			Key string `json:"key"`

			// Values Values of the group_by key to return in the query. If this field is omitted, all available values will be returned, up to a maximum of 200.
			Values *[]string `json:"values,omitempty"`
		} `json:"group_by,omitempty"`
		Id openapi_types.UUID `json:"id"`
	} `json:"billable_metrics,omitempty"`

	// CustomerIds A list of Metronome customer IDs to fetch usage for. If absent, usage for all customers will be returned.
	CustomerIds  *[]openapi_types.UUID `json:"customer_ids,omitempty"`
	EndingBefore time.Time             `json:"ending_before"`
	StartingOn   time.Time             `json:"starting_on"`

	// WindowSize A window_size of "day" or "hour" will return the usage for the specified period segmented into daily or hourly aggregates. A window_size of "none" will return a single usage aggregate for the entirety of the specified period.
	WindowSize UsageBatchQueryPayloadWindowSize `json:"window_size"`
}

// UsageBatchQueryPayloadWindowSize A window_size of "day" or "hour" will return the usage for the specified period segmented into daily or hourly aggregates. A window_size of "none" will return a single usage aggregate for the entirety of the specified period.
type UsageBatchQueryPayloadWindowSize string

// BillingProviderTypeParam defines model for BillingProviderType.
type BillingProviderTypeParam = BillingProviderType

// CustomerId defines model for CustomerId.
type CustomerId = openapi_types.UUID

// CustomerPlanId defines model for CustomerPlanId.
type CustomerPlanId = openapi_types.UUID

// InvoiceId defines model for InvoiceId.
type InvoiceId = openapi_types.UUID

// InvoiceStatusParam defines model for InvoiceStatus.
type InvoiceStatusParam = string

// NextPage defines model for NextPage.
type NextPage = string

// PageLimit defines model for PageLimit.
type PageLimit = int

// PlanId defines model for PlanId.
type PlanId = openapi_types.UUID

// RequiredEndDate defines model for RequiredEndDate.
type RequiredEndDate = time.Time

// RequiredStartDate defines model for RequiredStartDate.
type RequiredStartDate = time.Time

// NotFound defines model for NotFound.
type NotFound = Error

// ListCreditTypesParams defines parameters for ListCreditTypes.
type ListCreditTypesParams struct {
	// Limit Max number of results that should be returned
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// NextPage Cursor that indicates where the next page of results should start.
	NextPage *NextPage `form:"next_page,omitempty" json:"next_page,omitempty"`
}

// ListCreditLedgerEntriesParams defines parameters for ListCreditLedgerEntries.
type ListCreditLedgerEntriesParams struct {
	// NextPage Cursor that indicates where the next page of results should start.
	NextPage *NextPage `form:"next_page,omitempty" json:"next_page,omitempty"`
}

// ListGrantsParams defines parameters for ListGrants.
type ListGrantsParams struct {
	// NextPage Cursor that indicates where the next page of results should start.
	NextPage *NextPage `form:"next_page,omitempty" json:"next_page,omitempty"`
}

// AddCustomFieldKeyJSONBody defines parameters for AddCustomFieldKey.
type AddCustomFieldKeyJSONBody struct {
	EnforceUniqueness bool          `json:"enforce_uniqueness"`
	Entity            ManagedEntity `json:"entity"`
	Key               string        `json:"key"`
}

// DeleteCustomFieldsJSONBody defines parameters for DeleteCustomFields.
type DeleteCustomFieldsJSONBody struct {
	Entity   ManagedEntity      `json:"entity"`
	EntityId openapi_types.UUID `json:"entity_id"`
	Keys     []string           `json:"keys"`
}

// ListCustomFieldKeysJSONBody defines parameters for ListCustomFieldKeys.
type ListCustomFieldKeysJSONBody struct {
	// Entities Optional list of entity types to return keys for
	Entities *[]ManagedEntity `json:"entities,omitempty"`
}

// DisableCustomFieldKeyJSONBody defines parameters for DisableCustomFieldKey.
type DisableCustomFieldKeyJSONBody struct {
	Entity ManagedEntity `json:"entity"`
	Key    string        `json:"key"`
}

// SetCustomFieldsJSONBody defines parameters for SetCustomFields.
type SetCustomFieldsJSONBody struct {
	CustomFields CustomField        `json:"custom_fields"`
	Entity       ManagedEntity      `json:"entity"`
	EntityId     openapi_types.UUID `json:"entity_id"`
}

// ListCustomerAlertsParams defines parameters for ListCustomerAlerts.
type ListCustomerAlertsParams struct {
	// NextPage Cursor that indicates where the next page of results should start.
	NextPage *NextPage `form:"next_page,omitempty" json:"next_page,omitempty"`
}

// ListCustomersParams defines parameters for ListCustomers.
type ListCustomersParams struct {
	// Limit Max number of results that should be returned
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// NextPage Cursor that indicates where the next page of results should start.
	NextPage *NextPage `form:"next_page,omitempty" json:"next_page,omitempty"`

	// IngestAlias Filter the customer list by ingest_alias
	IngestAlias *string `form:"ingest_alias,omitempty" json:"ingest_alias,omitempty"`

	// CustomerIds Filter the customer list by customer_id.  Up to 100 ids can be provided.
	CustomerIds *[]string `form:"customer_ids,omitempty" json:"customer_ids,omitempty"`

	// OnlyArchived Filter the customer list by only archived customers.
	OnlyArchived *bool `form:"only_archived,omitempty" json:"only_archived,omitempty"`
}

// ListBillableMetricsParams defines parameters for ListBillableMetrics.
type ListBillableMetricsParams struct {
	// Limit Max number of results that should be returned
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// NextPage Cursor that indicates where the next page of results should start.
	NextPage *NextPage `form:"next_page,omitempty" json:"next_page,omitempty"`

	// OnCurrentPlan If true, the list of metrics will be filtered to just ones that are on the customer's current plan
	OnCurrentPlan *bool `form:"on_current_plan,omitempty" json:"on_current_plan,omitempty"`
}

// SetBillingConfigForCustomerJSONBody defines parameters for SetBillingConfigForCustomer.
type SetBillingConfigForCustomerJSONBody struct {
	AwsProductCode            *string                 `json:"aws_product_code,omitempty"`
	AwsRegion                 *AwsRegion              `json:"aws_region,omitempty"`
	BillingProviderCustomerId string                  `json:"billing_provider_customer_id"`
	StripeCollectionMethod    *StripeCollectionMethod `json:"stripe_collection_method,omitempty"`
}

// GetCostsParams defines parameters for GetCosts.
type GetCostsParams struct {
	// StartingOn RFC 3339 timestamp (inclusive)
	StartingOn RequiredStartDate `form:"starting_on" json:"starting_on"`

	// EndingBefore RFC 3339 timestamp (exclusive)
	EndingBefore RequiredEndDate `form:"ending_before" json:"ending_before"`

	// Limit Max number of results that should be returned
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// NextPage Cursor that indicates where the next page of results should start.
	NextPage *NextPage `form:"next_page,omitempty" json:"next_page,omitempty"`
}

// ListInvoicesParams defines parameters for ListInvoices.
type ListInvoicesParams struct {
	// Limit Max number of results that should be returned
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// NextPage Cursor that indicates where the next page of results should start.
	NextPage *NextPage `form:"next_page,omitempty" json:"next_page,omitempty"`

	// Status Invoice status, e.g. DRAFT, FINALIZED, or VOID
	InvoiceStatusParam *InvoiceStatusParam `form:"status,omitempty" json:"status,omitempty"`

	// CreditTypeId Only return invoices for the specified credit type
	CreditTypeId *string `form:"credit_type_id,omitempty" json:"credit_type_id,omitempty"`

	// StartingOn RFC 3339 timestamp (inclusive). Invoices will only be returned for billing periods that start at or after this time.
	StartingOn *time.Time `form:"starting_on,omitempty" json:"starting_on,omitempty"`

	// EndingBefore RFC 3339 timestamp (exclusive). Invoices will only be returned for billing periods that end before this time.
	EndingBefore *time.Time `form:"ending_before,omitempty" json:"ending_before,omitempty"`
}

// ListInvoicesCachedParams defines parameters for ListInvoicesCached.
type ListInvoicesCachedParams struct {
	// Limit Max number of results that should be returned
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// NextPage Cursor that indicates where the next page of results should start.
	NextPage *NextPage `form:"next_page,omitempty" json:"next_page,omitempty"`

	// Status Invoice status, e.g. DRAFT, FINALIZED, or VOID
	InvoiceStatusParam *InvoiceStatusParam `form:"status,omitempty" json:"status,omitempty"`

	// CreditTypeId Only return invoices for the specified credit type
	CreditTypeId *string `form:"credit_type_id,omitempty" json:"credit_type_id,omitempty"`

	// StartingOn RFC 3339 timestamp (inclusive). Invoices will only be returned for billing periods that start at or after this time.
	StartingOn *time.Time `form:"starting_on,omitempty" json:"starting_on,omitempty"`

	// EndingBefore RFC 3339 timestamp (exclusive). Invoices will only be returned for billing periods that end before this time.
	EndingBefore *time.Time `form:"ending_before,omitempty" json:"ending_before,omitempty"`
}

// ListCustomerPlansParams defines parameters for ListCustomerPlans.
type ListCustomerPlansParams struct {
	// Limit Max number of results that should be returned
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// NextPage Cursor that indicates where the next page of results should start.
	NextPage *NextPage `form:"next_page,omitempty" json:"next_page,omitempty"`
}

// GetPlanPriceAdjustmentsParams defines parameters for GetPlanPriceAdjustments.
type GetPlanPriceAdjustmentsParams struct {
	// Limit Max number of results that should be returned
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// NextPage Cursor that indicates where the next page of results should start.
	NextPage *NextPage `form:"next_page,omitempty" json:"next_page,omitempty"`
}

// IngestJSONBody defines parameters for Ingest.
type IngestJSONBody = []Event

// GetPlanChargesParams defines parameters for GetPlanCharges.
type GetPlanChargesParams struct {
	// Limit Max number of results that should be returned
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// NextPage Cursor that indicates where the next page of results should start.
	NextPage *NextPage `form:"next_page,omitempty" json:"next_page,omitempty"`
}

// ListPlansParams defines parameters for ListPlans.
type ListPlansParams struct {
	// Limit Max number of results that should be returned
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// NextPage Cursor that indicates where the next page of results should start.
	NextPage *NextPage `form:"next_page,omitempty" json:"next_page,omitempty"`
}

// GetUsageBatchParams defines parameters for GetUsageBatch.
type GetUsageBatchParams struct {
	// NextPage Cursor that indicates where the next page of results should start.
	NextPage *NextPage `form:"next_page,omitempty" json:"next_page,omitempty"`
}

// GetPagedUsageParams defines parameters for GetPagedUsage.
type GetPagedUsageParams struct {
	// Limit Max number of results that should be returned
	Limit *PageLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// NextPage Cursor that indicates where the next page of results should start.
	NextPage *NextPage `form:"next_page,omitempty" json:"next_page,omitempty"`
}

// ArchiveAlertJSONRequestBody defines body for ArchiveAlert for application/json ContentType.
type ArchiveAlertJSONRequestBody = Id

// CreateAlertJSONRequestBody defines body for CreateAlert for application/json ContentType.
type CreateAlertJSONRequestBody = CreateCustomerAlertPayload

// CreateGrantJSONRequestBody defines body for CreateGrant for application/json ContentType.
type CreateGrantJSONRequestBody = CreateCreditGrantPayload

// ListCreditLedgerEntriesJSONRequestBody defines body for ListCreditLedgerEntries for application/json ContentType.
type ListCreditLedgerEntriesJSONRequestBody = CreditLedgerEntriesQueryPayload

// ListGrantsJSONRequestBody defines body for ListGrants for application/json ContentType.
type ListGrantsJSONRequestBody = ListCreditGrantPayload

// VoidGrantJSONRequestBody defines body for VoidGrant for application/json ContentType.
type VoidGrantJSONRequestBody = Id

// AddCustomFieldKeyJSONRequestBody defines body for AddCustomFieldKey for application/json ContentType.
type AddCustomFieldKeyJSONRequestBody AddCustomFieldKeyJSONBody

// DeleteCustomFieldsJSONRequestBody defines body for DeleteCustomFields for application/json ContentType.
type DeleteCustomFieldsJSONRequestBody DeleteCustomFieldsJSONBody

// ListCustomFieldKeysJSONRequestBody defines body for ListCustomFieldKeys for application/json ContentType.
type ListCustomFieldKeysJSONRequestBody ListCustomFieldKeysJSONBody

// DisableCustomFieldKeyJSONRequestBody defines body for DisableCustomFieldKey for application/json ContentType.
type DisableCustomFieldKeyJSONRequestBody DisableCustomFieldKeyJSONBody

// SetCustomFieldsJSONRequestBody defines body for SetCustomFields for application/json ContentType.
type SetCustomFieldsJSONRequestBody SetCustomFieldsJSONBody

// GetCustomerAlertJSONRequestBody defines body for GetCustomerAlert for application/json ContentType.
type GetCustomerAlertJSONRequestBody = GetCustomerAlertPayload

// ListCustomerAlertsJSONRequestBody defines body for ListCustomerAlerts for application/json ContentType.
type ListCustomerAlertsJSONRequestBody = ListCustomerAlertsPayload

// CreateCustomerJSONRequestBody defines body for CreateCustomer for application/json ContentType.
type CreateCustomerJSONRequestBody = CreateCustomerPayload

// ArchiveCustomerJSONRequestBody defines body for ArchiveCustomer for application/json ContentType.
type ArchiveCustomerJSONRequestBody = Id

// SetBillingConfigForCustomerJSONRequestBody defines body for SetBillingConfigForCustomer for application/json ContentType.
type SetBillingConfigForCustomerJSONRequestBody SetBillingConfigForCustomerJSONBody

// AddPlanToCustomerJSONRequestBody defines body for AddPlanToCustomer for application/json ContentType.
type AddPlanToCustomerJSONRequestBody = AddPlanToCustomerPayload

// EndCustomerPlanJSONRequestBody defines body for EndCustomerPlan for application/json ContentType.
type EndCustomerPlanJSONRequestBody = EndCustomerPlanPayload

// SetIngestAliasesJSONRequestBody defines body for SetIngestAliases for application/json ContentType.
type SetIngestAliasesJSONRequestBody = SetIngestAliasesPayload

// SetCustomerNameJSONRequestBody defines body for SetCustomerName for application/json ContentType.
type SetCustomerNameJSONRequestBody = SetCustomerNamePayload

// UpdateCustomerConfigJSONRequestBody defines body for UpdateCustomerConfig for application/json ContentType.
type UpdateCustomerConfigJSONRequestBody = CustomerConfigPayload

// EmbeddableDashboardJSONRequestBody defines body for EmbeddableDashboard for application/json ContentType.
type EmbeddableDashboardJSONRequestBody = EmbeddableDashboardPayload

// IngestJSONRequestBody defines body for Ingest for application/json ContentType.
type IngestJSONRequestBody = IngestJSONBody

// GetUsageBatchJSONRequestBody defines body for GetUsageBatch for application/json ContentType.
type GetUsageBatchJSONRequestBody = UsageBatchQueryPayload

// GetPagedUsageJSONRequestBody defines body for GetPagedUsage for application/json ContentType.
type GetPagedUsageJSONRequestBody = PagedUsageQueryPayload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ArchiveAlert request with any body
	ArchiveAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ArchiveAlert(ctx context.Context, body ArchiveAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAlert request with any body
	CreateAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAlert(ctx context.Context, body CreateAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCreditTypes request
	ListCreditTypes(ctx context.Context, params *ListCreditTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateGrant request with any body
	CreateGrantWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateGrant(ctx context.Context, body CreateGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCreditLedgerEntries request with any body
	ListCreditLedgerEntriesWithBody(ctx context.Context, params *ListCreditLedgerEntriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListCreditLedgerEntries(ctx context.Context, params *ListCreditLedgerEntriesParams, body ListCreditLedgerEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListGrants request with any body
	ListGrantsWithBody(ctx context.Context, params *ListGrantsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListGrants(ctx context.Context, params *ListGrantsParams, body ListGrantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VoidGrant request with any body
	VoidGrantWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VoidGrant(ctx context.Context, body VoidGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddCustomFieldKey request with any body
	AddCustomFieldKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddCustomFieldKey(ctx context.Context, body AddCustomFieldKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCustomFields request with any body
	DeleteCustomFieldsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteCustomFields(ctx context.Context, body DeleteCustomFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomFieldKeys request with any body
	ListCustomFieldKeysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListCustomFieldKeys(ctx context.Context, body ListCustomFieldKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DisableCustomFieldKey request with any body
	DisableCustomFieldKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DisableCustomFieldKey(ctx context.Context, body DisableCustomFieldKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetCustomFields request with any body
	SetCustomFieldsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetCustomFields(ctx context.Context, body SetCustomFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomerAlert request with any body
	GetCustomerAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetCustomerAlert(ctx context.Context, body GetCustomerAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomerAlerts request with any body
	ListCustomerAlertsWithBody(ctx context.Context, params *ListCustomerAlertsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListCustomerAlerts(ctx context.Context, params *ListCustomerAlertsParams, body ListCustomerAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomers request
	ListCustomers(ctx context.Context, params *ListCustomersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomer request with any body
	CreateCustomerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCustomer(ctx context.Context, body CreateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveCustomer request with any body
	ArchiveCustomerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ArchiveCustomer(ctx context.Context, body ArchiveCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomer request
	GetCustomer(ctx context.Context, customerId CustomerId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListBillableMetrics request
	ListBillableMetrics(ctx context.Context, customerId CustomerId, params *ListBillableMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBillingConfigForCustomer request
	DeleteBillingConfigForCustomer(ctx context.Context, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBillingConfig request
	GetBillingConfig(ctx context.Context, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetBillingConfigForCustomer request with any body
	SetBillingConfigForCustomerWithBody(ctx context.Context, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetBillingConfigForCustomer(ctx context.Context, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam, body SetBillingConfigForCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCosts request
	GetCosts(ctx context.Context, customerId CustomerId, params *GetCostsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInvoices request
	ListInvoices(ctx context.Context, customerId CustomerId, params *ListInvoicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInvoicesCached request
	ListInvoicesCached(ctx context.Context, customerId CustomerId, params *ListInvoicesCachedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInvoice request
	GetInvoice(ctx context.Context, customerId CustomerId, invoiceId InvoiceId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCustomerPlans request
	ListCustomerPlans(ctx context.Context, customerId CustomerId, params *ListCustomerPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPlanToCustomer request with any body
	AddPlanToCustomerWithBody(ctx context.Context, customerId CustomerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPlanToCustomer(ctx context.Context, customerId CustomerId, body AddPlanToCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EndCustomerPlan request with any body
	EndCustomerPlanWithBody(ctx context.Context, customerId CustomerId, customerPlanId CustomerPlanId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EndCustomerPlan(ctx context.Context, customerId CustomerId, customerPlanId CustomerPlanId, body EndCustomerPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlanPriceAdjustments request
	GetPlanPriceAdjustments(ctx context.Context, customerId CustomerId, customerPlanId CustomerPlanId, params *GetPlanPriceAdjustmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetIngestAliases request with any body
	SetIngestAliasesWithBody(ctx context.Context, customerId CustomerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetIngestAliases(ctx context.Context, customerId CustomerId, body SetIngestAliasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetCustomerName request with any body
	SetCustomerNameWithBody(ctx context.Context, customerId CustomerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetCustomerName(ctx context.Context, customerId CustomerId, body SetCustomerNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCustomerConfig request with any body
	UpdateCustomerConfigWithBody(ctx context.Context, customerId CustomerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCustomerConfig(ctx context.Context, customerId CustomerId, body UpdateCustomerConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EmbeddableDashboard request with any body
	EmbeddableDashboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EmbeddableDashboard(ctx context.Context, body EmbeddableDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Ingest request with any body
	IngestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Ingest(ctx context.Context, body IngestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlanDetails request
	GetPlanDetails(ctx context.Context, planId PlanId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlanCharges request
	GetPlanCharges(ctx context.Context, planId PlanId, params *GetPlanChargesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlans request
	ListPlans(ctx context.Context, params *ListPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsageBatch request with any body
	GetUsageBatchWithBody(ctx context.Context, params *GetUsageBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetUsageBatch(ctx context.Context, params *GetUsageBatchParams, body GetUsageBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPagedUsage request with any body
	GetPagedUsageWithBody(ctx context.Context, params *GetPagedUsageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetPagedUsage(ctx context.Context, params *GetPagedUsageParams, body GetPagedUsageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ArchiveAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveAlertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveAlert(ctx context.Context, body ArchiveAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveAlertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAlert(ctx context.Context, body CreateAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAlertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCreditTypes(ctx context.Context, params *ListCreditTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCreditTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGrantWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGrantRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateGrant(ctx context.Context, body CreateGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateGrantRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCreditLedgerEntriesWithBody(ctx context.Context, params *ListCreditLedgerEntriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCreditLedgerEntriesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCreditLedgerEntries(ctx context.Context, params *ListCreditLedgerEntriesParams, body ListCreditLedgerEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCreditLedgerEntriesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListGrantsWithBody(ctx context.Context, params *ListGrantsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGrantsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListGrants(ctx context.Context, params *ListGrantsParams, body ListGrantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListGrantsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VoidGrantWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVoidGrantRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VoidGrant(ctx context.Context, body VoidGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVoidGrantRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCustomFieldKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCustomFieldKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddCustomFieldKey(ctx context.Context, body AddCustomFieldKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddCustomFieldKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomFieldsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomFieldsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCustomFields(ctx context.Context, body DeleteCustomFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCustomFieldsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomFieldKeysWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomFieldKeysRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomFieldKeys(ctx context.Context, body ListCustomFieldKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomFieldKeysRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisableCustomFieldKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisableCustomFieldKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisableCustomFieldKey(ctx context.Context, body DisableCustomFieldKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisableCustomFieldKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetCustomFieldsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetCustomFieldsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetCustomFields(ctx context.Context, body SetCustomFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetCustomFieldsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomerAlertWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomerAlertRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomerAlert(ctx context.Context, body GetCustomerAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomerAlertRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomerAlertsWithBody(ctx context.Context, params *ListCustomerAlertsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomerAlertsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomerAlerts(ctx context.Context, params *ListCustomerAlertsParams, body ListCustomerAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomerAlertsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomers(ctx context.Context, params *ListCustomersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomer(ctx context.Context, body CreateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveCustomerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveCustomerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveCustomer(ctx context.Context, body ArchiveCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveCustomerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomer(ctx context.Context, customerId CustomerId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomerRequest(c.Server, customerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListBillableMetrics(ctx context.Context, customerId CustomerId, params *ListBillableMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListBillableMetricsRequest(c.Server, customerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBillingConfigForCustomer(ctx context.Context, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBillingConfigForCustomerRequest(c.Server, customerId, billingProviderTypeParam)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBillingConfig(ctx context.Context, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBillingConfigRequest(c.Server, customerId, billingProviderTypeParam)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetBillingConfigForCustomerWithBody(ctx context.Context, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetBillingConfigForCustomerRequestWithBody(c.Server, customerId, billingProviderTypeParam, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetBillingConfigForCustomer(ctx context.Context, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam, body SetBillingConfigForCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetBillingConfigForCustomerRequest(c.Server, customerId, billingProviderTypeParam, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCosts(ctx context.Context, customerId CustomerId, params *GetCostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCostsRequest(c.Server, customerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInvoices(ctx context.Context, customerId CustomerId, params *ListInvoicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInvoicesRequest(c.Server, customerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListInvoicesCached(ctx context.Context, customerId CustomerId, params *ListInvoicesCachedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInvoicesCachedRequest(c.Server, customerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInvoice(ctx context.Context, customerId CustomerId, invoiceId InvoiceId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInvoiceRequest(c.Server, customerId, invoiceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCustomerPlans(ctx context.Context, customerId CustomerId, params *ListCustomerPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCustomerPlansRequest(c.Server, customerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPlanToCustomerWithBody(ctx context.Context, customerId CustomerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPlanToCustomerRequestWithBody(c.Server, customerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPlanToCustomer(ctx context.Context, customerId CustomerId, body AddPlanToCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPlanToCustomerRequest(c.Server, customerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndCustomerPlanWithBody(ctx context.Context, customerId CustomerId, customerPlanId CustomerPlanId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndCustomerPlanRequestWithBody(c.Server, customerId, customerPlanId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EndCustomerPlan(ctx context.Context, customerId CustomerId, customerPlanId CustomerPlanId, body EndCustomerPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEndCustomerPlanRequest(c.Server, customerId, customerPlanId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlanPriceAdjustments(ctx context.Context, customerId CustomerId, customerPlanId CustomerPlanId, params *GetPlanPriceAdjustmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlanPriceAdjustmentsRequest(c.Server, customerId, customerPlanId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetIngestAliasesWithBody(ctx context.Context, customerId CustomerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetIngestAliasesRequestWithBody(c.Server, customerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetIngestAliases(ctx context.Context, customerId CustomerId, body SetIngestAliasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetIngestAliasesRequest(c.Server, customerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetCustomerNameWithBody(ctx context.Context, customerId CustomerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetCustomerNameRequestWithBody(c.Server, customerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetCustomerName(ctx context.Context, customerId CustomerId, body SetCustomerNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetCustomerNameRequest(c.Server, customerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomerConfigWithBody(ctx context.Context, customerId CustomerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomerConfigRequestWithBody(c.Server, customerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCustomerConfig(ctx context.Context, customerId CustomerId, body UpdateCustomerConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCustomerConfigRequest(c.Server, customerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmbeddableDashboardWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmbeddableDashboardRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EmbeddableDashboard(ctx context.Context, body EmbeddableDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEmbeddableDashboardRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) IngestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIngestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Ingest(ctx context.Context, body IngestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewIngestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlanDetails(ctx context.Context, planId PlanId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlanDetailsRequest(c.Server, planId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlanCharges(ctx context.Context, planId PlanId, params *GetPlanChargesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlanChargesRequest(c.Server, planId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlans(ctx context.Context, params *ListPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlansRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsageBatchWithBody(ctx context.Context, params *GetUsageBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsageBatchRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsageBatch(ctx context.Context, params *GetUsageBatchParams, body GetUsageBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsageBatchRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPagedUsageWithBody(ctx context.Context, params *GetPagedUsageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPagedUsageRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPagedUsage(ctx context.Context, params *GetPagedUsageParams, body GetPagedUsageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPagedUsageRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewArchiveAlertRequest calls the generic ArchiveAlert builder with application/json body
func NewArchiveAlertRequest(server string, body ArchiveAlertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewArchiveAlertRequestWithBody(server, "application/json", bodyReader)
}

// NewArchiveAlertRequestWithBody generates requests for ArchiveAlert with any type of body
func NewArchiveAlertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alerts/archive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAlertRequest calls the generic CreateAlert builder with application/json body
func NewCreateAlertRequest(server string, body CreateAlertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAlertRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAlertRequestWithBody generates requests for CreateAlert with any type of body
func NewCreateAlertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alerts/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCreditTypesRequest generates requests for ListCreditTypes
func NewListCreditTypesRequest(server string, params *ListCreditTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credit-types/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NextPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next_page", runtime.ParamLocationQuery, *params.NextPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateGrantRequest calls the generic CreateGrant builder with application/json body
func NewCreateGrantRequest(server string, body CreateGrantJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateGrantRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateGrantRequestWithBody generates requests for CreateGrant with any type of body
func NewCreateGrantRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credits/createGrant")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCreditLedgerEntriesRequest calls the generic ListCreditLedgerEntries builder with application/json body
func NewListCreditLedgerEntriesRequest(server string, params *ListCreditLedgerEntriesParams, body ListCreditLedgerEntriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListCreditLedgerEntriesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewListCreditLedgerEntriesRequestWithBody generates requests for ListCreditLedgerEntries with any type of body
func NewListCreditLedgerEntriesRequestWithBody(server string, params *ListCreditLedgerEntriesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credits/listEntries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.NextPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next_page", runtime.ParamLocationQuery, *params.NextPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListGrantsRequest calls the generic ListGrants builder with application/json body
func NewListGrantsRequest(server string, params *ListGrantsParams, body ListGrantsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListGrantsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewListGrantsRequestWithBody generates requests for ListGrants with any type of body
func NewListGrantsRequestWithBody(server string, params *ListGrantsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credits/listGrants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.NextPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next_page", runtime.ParamLocationQuery, *params.NextPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVoidGrantRequest calls the generic VoidGrant builder with application/json body
func NewVoidGrantRequest(server string, body VoidGrantJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVoidGrantRequestWithBody(server, "application/json", bodyReader)
}

// NewVoidGrantRequestWithBody generates requests for VoidGrant with any type of body
func NewVoidGrantRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/credits/voidGrant")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddCustomFieldKeyRequest calls the generic AddCustomFieldKey builder with application/json body
func NewAddCustomFieldKeyRequest(server string, body AddCustomFieldKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddCustomFieldKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewAddCustomFieldKeyRequestWithBody generates requests for AddCustomFieldKey with any type of body
func NewAddCustomFieldKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customFields/addKey")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCustomFieldsRequest calls the generic DeleteCustomFields builder with application/json body
func NewDeleteCustomFieldsRequest(server string, body DeleteCustomFieldsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteCustomFieldsRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteCustomFieldsRequestWithBody generates requests for DeleteCustomFields with any type of body
func NewDeleteCustomFieldsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customFields/deleteValues")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCustomFieldKeysRequest calls the generic ListCustomFieldKeys builder with application/json body
func NewListCustomFieldKeysRequest(server string, body ListCustomFieldKeysJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListCustomFieldKeysRequestWithBody(server, "application/json", bodyReader)
}

// NewListCustomFieldKeysRequestWithBody generates requests for ListCustomFieldKeys with any type of body
func NewListCustomFieldKeysRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customFields/listKeys")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDisableCustomFieldKeyRequest calls the generic DisableCustomFieldKey builder with application/json body
func NewDisableCustomFieldKeyRequest(server string, body DisableCustomFieldKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDisableCustomFieldKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewDisableCustomFieldKeyRequestWithBody generates requests for DisableCustomFieldKey with any type of body
func NewDisableCustomFieldKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customFields/removeKey")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetCustomFieldsRequest calls the generic SetCustomFields builder with application/json body
func NewSetCustomFieldsRequest(server string, body SetCustomFieldsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetCustomFieldsRequestWithBody(server, "application/json", bodyReader)
}

// NewSetCustomFieldsRequestWithBody generates requests for SetCustomFields with any type of body
func NewSetCustomFieldsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customFields/setValues")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomerAlertRequest calls the generic GetCustomerAlert builder with application/json body
func NewGetCustomerAlertRequest(server string, body GetCustomerAlertJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetCustomerAlertRequestWithBody(server, "application/json", bodyReader)
}

// NewGetCustomerAlertRequestWithBody generates requests for GetCustomerAlert with any type of body
func NewGetCustomerAlertRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer-alerts/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCustomerAlertsRequest calls the generic ListCustomerAlerts builder with application/json body
func NewListCustomerAlertsRequest(server string, params *ListCustomerAlertsParams, body ListCustomerAlertsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListCustomerAlertsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewListCustomerAlertsRequestWithBody generates requests for ListCustomerAlerts with any type of body
func NewListCustomerAlertsRequestWithBody(server string, params *ListCustomerAlertsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customer-alerts/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.NextPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next_page", runtime.ParamLocationQuery, *params.NextPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCustomersRequest generates requests for ListCustomers
func NewListCustomersRequest(server string, params *ListCustomersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NextPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next_page", runtime.ParamLocationQuery, *params.NextPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IngestAlias != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ingest_alias", runtime.ParamLocationQuery, *params.IngestAlias); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CustomerIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customer_ids", runtime.ParamLocationQuery, *params.CustomerIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OnlyArchived != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "only_archived", runtime.ParamLocationQuery, *params.OnlyArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomerRequest calls the generic CreateCustomer builder with application/json body
func NewCreateCustomerRequest(server string, body CreateCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCustomerRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCustomerRequestWithBody generates requests for CreateCustomer with any type of body
func NewCreateCustomerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveCustomerRequest calls the generic ArchiveCustomer builder with application/json body
func NewArchiveCustomerRequest(server string, body ArchiveCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewArchiveCustomerRequestWithBody(server, "application/json", bodyReader)
}

// NewArchiveCustomerRequestWithBody generates requests for ArchiveCustomer with any type of body
func NewArchiveCustomerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/archive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCustomerRequest generates requests for GetCustomer
func NewGetCustomerRequest(server string, customerId CustomerId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListBillableMetricsRequest generates requests for ListBillableMetrics
func NewListBillableMetricsRequest(server string, customerId CustomerId, params *ListBillableMetricsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/billable-metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NextPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next_page", runtime.ParamLocationQuery, *params.NextPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OnCurrentPlan != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "on_current_plan", runtime.ParamLocationQuery, *params.OnCurrentPlan); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteBillingConfigForCustomerRequest generates requests for DeleteBillingConfigForCustomer
func NewDeleteBillingConfigForCustomerRequest(server string, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "billing_provider_type", runtime.ParamLocationPath, billingProviderTypeParam)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/billing-config/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBillingConfigRequest generates requests for GetBillingConfig
func NewGetBillingConfigRequest(server string, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "billing_provider_type", runtime.ParamLocationPath, billingProviderTypeParam)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/billing-config/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetBillingConfigForCustomerRequest calls the generic SetBillingConfigForCustomer builder with application/json body
func NewSetBillingConfigForCustomerRequest(server string, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam, body SetBillingConfigForCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetBillingConfigForCustomerRequestWithBody(server, customerId, billingProviderTypeParam, "application/json", bodyReader)
}

// NewSetBillingConfigForCustomerRequestWithBody generates requests for SetBillingConfigForCustomer with any type of body
func NewSetBillingConfigForCustomerRequestWithBody(server string, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "billing_provider_type", runtime.ParamLocationPath, billingProviderTypeParam)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/billing-config/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCostsRequest generates requests for GetCosts
func NewGetCostsRequest(server string, customerId CustomerId, params *GetCostsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/costs", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "starting_on", runtime.ParamLocationQuery, params.StartingOn); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ending_before", runtime.ParamLocationQuery, params.EndingBefore); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NextPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next_page", runtime.ParamLocationQuery, *params.NextPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListInvoicesRequest generates requests for ListInvoices
func NewListInvoicesRequest(server string, customerId CustomerId, params *ListInvoicesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/invoices", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NextPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next_page", runtime.ParamLocationQuery, *params.NextPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InvoiceStatusParam != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.InvoiceStatusParam); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreditTypeId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "credit_type_id", runtime.ParamLocationQuery, *params.CreditTypeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingOn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "starting_on", runtime.ParamLocationQuery, *params.StartingOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ending_before", runtime.ParamLocationQuery, *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListInvoicesCachedRequest generates requests for ListInvoicesCached
func NewListInvoicesCachedRequest(server string, customerId CustomerId, params *ListInvoicesCachedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/invoices/cached", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NextPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next_page", runtime.ParamLocationQuery, *params.NextPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InvoiceStatusParam != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.InvoiceStatusParam); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreditTypeId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "credit_type_id", runtime.ParamLocationQuery, *params.CreditTypeId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartingOn != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "starting_on", runtime.ParamLocationQuery, *params.StartingOn); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndingBefore != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ending_before", runtime.ParamLocationQuery, *params.EndingBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInvoiceRequest generates requests for GetInvoice
func NewGetInvoiceRequest(server string, customerId CustomerId, invoiceId InvoiceId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "invoice_id", runtime.ParamLocationPath, invoiceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/invoices/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCustomerPlansRequest generates requests for ListCustomerPlans
func NewListCustomerPlansRequest(server string, customerId CustomerId, params *ListCustomerPlansParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/plans", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NextPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next_page", runtime.ParamLocationQuery, *params.NextPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPlanToCustomerRequest calls the generic AddPlanToCustomer builder with application/json body
func NewAddPlanToCustomerRequest(server string, customerId CustomerId, body AddPlanToCustomerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPlanToCustomerRequestWithBody(server, customerId, "application/json", bodyReader)
}

// NewAddPlanToCustomerRequestWithBody generates requests for AddPlanToCustomer with any type of body
func NewAddPlanToCustomerRequestWithBody(server string, customerId CustomerId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/plans/add", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEndCustomerPlanRequest calls the generic EndCustomerPlan builder with application/json body
func NewEndCustomerPlanRequest(server string, customerId CustomerId, customerPlanId CustomerPlanId, body EndCustomerPlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEndCustomerPlanRequestWithBody(server, customerId, customerPlanId, "application/json", bodyReader)
}

// NewEndCustomerPlanRequestWithBody generates requests for EndCustomerPlan with any type of body
func NewEndCustomerPlanRequestWithBody(server string, customerId CustomerId, customerPlanId CustomerPlanId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "customer_plan_id", runtime.ParamLocationPath, customerPlanId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/plans/%s/end", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlanPriceAdjustmentsRequest generates requests for GetPlanPriceAdjustments
func NewGetPlanPriceAdjustmentsRequest(server string, customerId CustomerId, customerPlanId CustomerPlanId, params *GetPlanPriceAdjustmentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "customer_plan_id", runtime.ParamLocationPath, customerPlanId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/plans/%s/priceAdjustments", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NextPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next_page", runtime.ParamLocationQuery, *params.NextPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetIngestAliasesRequest calls the generic SetIngestAliases builder with application/json body
func NewSetIngestAliasesRequest(server string, customerId CustomerId, body SetIngestAliasesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetIngestAliasesRequestWithBody(server, customerId, "application/json", bodyReader)
}

// NewSetIngestAliasesRequestWithBody generates requests for SetIngestAliases with any type of body
func NewSetIngestAliasesRequestWithBody(server string, customerId CustomerId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/setIngestAliases", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetCustomerNameRequest calls the generic SetCustomerName builder with application/json body
func NewSetCustomerNameRequest(server string, customerId CustomerId, body SetCustomerNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetCustomerNameRequestWithBody(server, customerId, "application/json", bodyReader)
}

// NewSetCustomerNameRequestWithBody generates requests for SetCustomerName with any type of body
func NewSetCustomerNameRequestWithBody(server string, customerId CustomerId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/setName", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateCustomerConfigRequest calls the generic UpdateCustomerConfig builder with application/json body
func NewUpdateCustomerConfigRequest(server string, customerId CustomerId, body UpdateCustomerConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCustomerConfigRequestWithBody(server, customerId, "application/json", bodyReader)
}

// NewUpdateCustomerConfigRequestWithBody generates requests for UpdateCustomerConfig with any type of body
func NewUpdateCustomerConfigRequestWithBody(server string, customerId CustomerId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customer_id", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/customers/%s/updateConfig", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEmbeddableDashboardRequest calls the generic EmbeddableDashboard builder with application/json body
func NewEmbeddableDashboardRequest(server string, body EmbeddableDashboardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEmbeddableDashboardRequestWithBody(server, "application/json", bodyReader)
}

// NewEmbeddableDashboardRequestWithBody generates requests for EmbeddableDashboard with any type of body
func NewEmbeddableDashboardRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dashboards/getEmbeddableUrl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewIngestRequest calls the generic Ingest builder with application/json body
func NewIngestRequest(server string, body IngestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewIngestRequestWithBody(server, "application/json", bodyReader)
}

// NewIngestRequestWithBody generates requests for Ingest with any type of body
func NewIngestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ingest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlanDetailsRequest generates requests for GetPlanDetails
func NewGetPlanDetailsRequest(server string, planId PlanId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "plan_id", runtime.ParamLocationPath, planId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/planDetails/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlanChargesRequest generates requests for GetPlanCharges
func NewGetPlanChargesRequest(server string, planId PlanId, params *GetPlanChargesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "plan_id", runtime.ParamLocationPath, planId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/planDetails/%s/charges", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NextPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next_page", runtime.ParamLocationQuery, *params.NextPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPlansRequest generates requests for ListPlans
func NewListPlansRequest(server string, params *ListPlansParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NextPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next_page", runtime.ParamLocationQuery, *params.NextPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsageBatchRequest calls the generic GetUsageBatch builder with application/json body
func NewGetUsageBatchRequest(server string, params *GetUsageBatchParams, body GetUsageBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetUsageBatchRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetUsageBatchRequestWithBody generates requests for GetUsageBatch with any type of body
func NewGetUsageBatchRequestWithBody(server string, params *GetUsageBatchParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.NextPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next_page", runtime.ParamLocationQuery, *params.NextPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPagedUsageRequest calls the generic GetPagedUsage builder with application/json body
func NewGetPagedUsageRequest(server string, params *GetPagedUsageParams, body GetPagedUsageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetPagedUsageRequestWithBody(server, params, "application/json", bodyReader)
}

// NewGetPagedUsageRequestWithBody generates requests for GetPagedUsage with any type of body
func NewGetPagedUsageRequestWithBody(server string, params *GetPagedUsageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usage/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NextPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "next_page", runtime.ParamLocationQuery, *params.NextPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ArchiveAlert request with any body
	ArchiveAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ArchiveAlertResponse, error)

	ArchiveAlertWithResponse(ctx context.Context, body ArchiveAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*ArchiveAlertResponse, error)

	// CreateAlert request with any body
	CreateAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertResponse, error)

	CreateAlertWithResponse(ctx context.Context, body CreateAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAlertResponse, error)

	// ListCreditTypes request
	ListCreditTypesWithResponse(ctx context.Context, params *ListCreditTypesParams, reqEditors ...RequestEditorFn) (*ListCreditTypesResponse, error)

	// CreateGrant request with any body
	CreateGrantWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGrantResponse, error)

	CreateGrantWithResponse(ctx context.Context, body CreateGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGrantResponse, error)

	// ListCreditLedgerEntries request with any body
	ListCreditLedgerEntriesWithBodyWithResponse(ctx context.Context, params *ListCreditLedgerEntriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListCreditLedgerEntriesResponse, error)

	ListCreditLedgerEntriesWithResponse(ctx context.Context, params *ListCreditLedgerEntriesParams, body ListCreditLedgerEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*ListCreditLedgerEntriesResponse, error)

	// ListGrants request with any body
	ListGrantsWithBodyWithResponse(ctx context.Context, params *ListGrantsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListGrantsResponse, error)

	ListGrantsWithResponse(ctx context.Context, params *ListGrantsParams, body ListGrantsJSONRequestBody, reqEditors ...RequestEditorFn) (*ListGrantsResponse, error)

	// VoidGrant request with any body
	VoidGrantWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VoidGrantResponse, error)

	VoidGrantWithResponse(ctx context.Context, body VoidGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*VoidGrantResponse, error)

	// AddCustomFieldKey request with any body
	AddCustomFieldKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCustomFieldKeyResponse, error)

	AddCustomFieldKeyWithResponse(ctx context.Context, body AddCustomFieldKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCustomFieldKeyResponse, error)

	// DeleteCustomFields request with any body
	DeleteCustomFieldsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCustomFieldsResponse, error)

	DeleteCustomFieldsWithResponse(ctx context.Context, body DeleteCustomFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCustomFieldsResponse, error)

	// ListCustomFieldKeys request with any body
	ListCustomFieldKeysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListCustomFieldKeysResponse, error)

	ListCustomFieldKeysWithResponse(ctx context.Context, body ListCustomFieldKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*ListCustomFieldKeysResponse, error)

	// DisableCustomFieldKey request with any body
	DisableCustomFieldKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DisableCustomFieldKeyResponse, error)

	DisableCustomFieldKeyWithResponse(ctx context.Context, body DisableCustomFieldKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*DisableCustomFieldKeyResponse, error)

	// SetCustomFields request with any body
	SetCustomFieldsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetCustomFieldsResponse, error)

	SetCustomFieldsWithResponse(ctx context.Context, body SetCustomFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetCustomFieldsResponse, error)

	// GetCustomerAlert request with any body
	GetCustomerAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCustomerAlertResponse, error)

	GetCustomerAlertWithResponse(ctx context.Context, body GetCustomerAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCustomerAlertResponse, error)

	// ListCustomerAlerts request with any body
	ListCustomerAlertsWithBodyWithResponse(ctx context.Context, params *ListCustomerAlertsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListCustomerAlertsResponse, error)

	ListCustomerAlertsWithResponse(ctx context.Context, params *ListCustomerAlertsParams, body ListCustomerAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*ListCustomerAlertsResponse, error)

	// ListCustomers request
	ListCustomersWithResponse(ctx context.Context, params *ListCustomersParams, reqEditors ...RequestEditorFn) (*ListCustomersResponse, error)

	// CreateCustomer request with any body
	CreateCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomerResponse, error)

	CreateCustomerWithResponse(ctx context.Context, body CreateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomerResponse, error)

	// ArchiveCustomer request with any body
	ArchiveCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ArchiveCustomerResponse, error)

	ArchiveCustomerWithResponse(ctx context.Context, body ArchiveCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*ArchiveCustomerResponse, error)

	// GetCustomer request
	GetCustomerWithResponse(ctx context.Context, customerId CustomerId, reqEditors ...RequestEditorFn) (*GetCustomerResponse, error)

	// ListBillableMetrics request
	ListBillableMetricsWithResponse(ctx context.Context, customerId CustomerId, params *ListBillableMetricsParams, reqEditors ...RequestEditorFn) (*ListBillableMetricsResponse, error)

	// DeleteBillingConfigForCustomer request
	DeleteBillingConfigForCustomerWithResponse(ctx context.Context, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam, reqEditors ...RequestEditorFn) (*DeleteBillingConfigForCustomerResponse, error)

	// GetBillingConfig request
	GetBillingConfigWithResponse(ctx context.Context, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam, reqEditors ...RequestEditorFn) (*GetBillingConfigResponse, error)

	// SetBillingConfigForCustomer request with any body
	SetBillingConfigForCustomerWithBodyWithResponse(ctx context.Context, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetBillingConfigForCustomerResponse, error)

	SetBillingConfigForCustomerWithResponse(ctx context.Context, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam, body SetBillingConfigForCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*SetBillingConfigForCustomerResponse, error)

	// GetCosts request
	GetCostsWithResponse(ctx context.Context, customerId CustomerId, params *GetCostsParams, reqEditors ...RequestEditorFn) (*GetCostsResponse, error)

	// ListInvoices request
	ListInvoicesWithResponse(ctx context.Context, customerId CustomerId, params *ListInvoicesParams, reqEditors ...RequestEditorFn) (*ListInvoicesResponse, error)

	// ListInvoicesCached request
	ListInvoicesCachedWithResponse(ctx context.Context, customerId CustomerId, params *ListInvoicesCachedParams, reqEditors ...RequestEditorFn) (*ListInvoicesCachedResponse, error)

	// GetInvoice request
	GetInvoiceWithResponse(ctx context.Context, customerId CustomerId, invoiceId InvoiceId, reqEditors ...RequestEditorFn) (*GetInvoiceResponse, error)

	// ListCustomerPlans request
	ListCustomerPlansWithResponse(ctx context.Context, customerId CustomerId, params *ListCustomerPlansParams, reqEditors ...RequestEditorFn) (*ListCustomerPlansResponse, error)

	// AddPlanToCustomer request with any body
	AddPlanToCustomerWithBodyWithResponse(ctx context.Context, customerId CustomerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPlanToCustomerResponse, error)

	AddPlanToCustomerWithResponse(ctx context.Context, customerId CustomerId, body AddPlanToCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPlanToCustomerResponse, error)

	// EndCustomerPlan request with any body
	EndCustomerPlanWithBodyWithResponse(ctx context.Context, customerId CustomerId, customerPlanId CustomerPlanId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndCustomerPlanResponse, error)

	EndCustomerPlanWithResponse(ctx context.Context, customerId CustomerId, customerPlanId CustomerPlanId, body EndCustomerPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*EndCustomerPlanResponse, error)

	// GetPlanPriceAdjustments request
	GetPlanPriceAdjustmentsWithResponse(ctx context.Context, customerId CustomerId, customerPlanId CustomerPlanId, params *GetPlanPriceAdjustmentsParams, reqEditors ...RequestEditorFn) (*GetPlanPriceAdjustmentsResponse, error)

	// SetIngestAliases request with any body
	SetIngestAliasesWithBodyWithResponse(ctx context.Context, customerId CustomerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetIngestAliasesResponse, error)

	SetIngestAliasesWithResponse(ctx context.Context, customerId CustomerId, body SetIngestAliasesJSONRequestBody, reqEditors ...RequestEditorFn) (*SetIngestAliasesResponse, error)

	// SetCustomerName request with any body
	SetCustomerNameWithBodyWithResponse(ctx context.Context, customerId CustomerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetCustomerNameResponse, error)

	SetCustomerNameWithResponse(ctx context.Context, customerId CustomerId, body SetCustomerNameJSONRequestBody, reqEditors ...RequestEditorFn) (*SetCustomerNameResponse, error)

	// UpdateCustomerConfig request with any body
	UpdateCustomerConfigWithBodyWithResponse(ctx context.Context, customerId CustomerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomerConfigResponse, error)

	UpdateCustomerConfigWithResponse(ctx context.Context, customerId CustomerId, body UpdateCustomerConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomerConfigResponse, error)

	// EmbeddableDashboard request with any body
	EmbeddableDashboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmbeddableDashboardResponse, error)

	EmbeddableDashboardWithResponse(ctx context.Context, body EmbeddableDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*EmbeddableDashboardResponse, error)

	// Ingest request with any body
	IngestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IngestResponse, error)

	IngestWithResponse(ctx context.Context, body IngestJSONRequestBody, reqEditors ...RequestEditorFn) (*IngestResponse, error)

	// GetPlanDetails request
	GetPlanDetailsWithResponse(ctx context.Context, planId PlanId, reqEditors ...RequestEditorFn) (*GetPlanDetailsResponse, error)

	// GetPlanCharges request
	GetPlanChargesWithResponse(ctx context.Context, planId PlanId, params *GetPlanChargesParams, reqEditors ...RequestEditorFn) (*GetPlanChargesResponse, error)

	// ListPlans request
	ListPlansWithResponse(ctx context.Context, params *ListPlansParams, reqEditors ...RequestEditorFn) (*ListPlansResponse, error)

	// GetUsageBatch request with any body
	GetUsageBatchWithBodyWithResponse(ctx context.Context, params *GetUsageBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUsageBatchResponse, error)

	GetUsageBatchWithResponse(ctx context.Context, params *GetUsageBatchParams, body GetUsageBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUsageBatchResponse, error)

	// GetPagedUsage request with any body
	GetPagedUsageWithBodyWithResponse(ctx context.Context, params *GetPagedUsageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPagedUsageResponse, error)

	GetPagedUsageWithResponse(ctx context.Context, params *GetPagedUsageParams, body GetPagedUsageJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPagedUsageResponse, error)
}

type ArchiveAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Id `json:"data"`
	}
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r ArchiveAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Id `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCreditTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []struct {
			Id         *openapi_types.UUID `json:"id,omitempty"`
			IsCurrency *bool               `json:"is_currency,omitempty"`
			Name       *string             `json:"name,omitempty"`
		} `json:"data"`
		NextPage *string `json:"next_page"`
	}
}

// Status returns HTTPResponse.Status
func (r ListCreditTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCreditTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateGrantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Id `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateGrantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateGrantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCreditLedgerEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     []CustomerCreditTypeLedger `json:"data"`
		NextPage *string                    `json:"next_page"`
	}
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r ListCreditLedgerEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCreditLedgerEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListGrantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     []CreditGrant `json:"data"`
		NextPage *string       `json:"next_page"`
	}
}

// Status returns HTTPResponse.Status
func (r ListGrantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListGrantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VoidGrantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Id `json:"data"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r VoidGrantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VoidGrantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddCustomFieldKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AddCustomFieldKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddCustomFieldKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCustomFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCustomFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCustomFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomFieldKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []struct {
			EnforceUniqueness bool          `json:"enforce_uniqueness"`
			Entity            ManagedEntity `json:"entity"`
			Key               string        `json:"key"`
		} `json:"data"`
		NextPage *string `json:"next_page"`
	}
}

// Status returns HTTPResponse.Status
func (r ListCustomFieldKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomFieldKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisableCustomFieldKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DisableCustomFieldKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisableCustomFieldKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetCustomFieldsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetCustomFieldsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetCustomFieldsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomerAlertResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data CustomerAlert `json:"data"`
	}
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetCustomerAlertResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerAlertResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomerAlertsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     []CustomerAlert `json:"data"`
		NextPage *string         `json:"next_page"`
	}
}

// Status returns HTTPResponse.Status
func (r ListCustomerAlertsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomerAlertsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     []CustomerDetail `json:"data"`
		NextPage *string          `json:"next_page"`
	}
}

// Status returns HTTPResponse.Status
func (r ListCustomersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Customer `json:"data"`
	}
	JSON409 *struct {
		Message *string `json:"message,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r CreateCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Id `json:"data"`
	}
	JSON400 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r ArchiveCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data CustomerDetail `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListBillableMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     []BillableMetric `json:"data"`
		NextPage *string          `json:"next_page"`
	}
}

// Status returns HTTPResponse.Status
func (r ListBillableMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListBillableMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBillingConfigForCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteBillingConfigForCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBillingConfigForCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBillingConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			// AwsExpirationDate Contract expiration date for the customer. The expected format is RFC 3339 and can be retrieved from AWS's GetEntitlements API. (See https://docs.aws.amazon.com/marketplaceentitlement/latest/APIReference/API_GetEntitlements.html.)
			AwsExpirationDate         *AwsExpirationDate      `json:"aws_expiration_date,omitempty"`
			AwsProductCode            *string                 `json:"aws_product_code,omitempty"`
			AwsRegion                 *AwsRegion              `json:"aws_region,omitempty"`
			BillingProviderCustomerId *string                 `json:"billing_provider_customer_id,omitempty"`
			StripeCollectionMethod    *StripeCollectionMethod `json:"stripe_collection_method,omitempty"`
		} `json:"data"`
	}
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetBillingConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBillingConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetBillingConfigForCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r SetBillingConfigForCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetBillingConfigForCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     []Costs `json:"data"`
		NextPage *string `json:"next_page"`
	}
	JSON400 *Error
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetCostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInvoicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     []Invoice `json:"data"`
		NextPage *string   `json:"next_page"`
	}
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r ListInvoicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInvoicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInvoicesCachedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     []Invoice `json:"data"`
		NextPage *string   `json:"next_page"`
	}
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r ListInvoicesCachedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInvoicesCachedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInvoiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Invoice `json:"data"`
	}
	JSON404 *Error
}

// Status returns HTTPResponse.Status
func (r GetInvoiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInvoiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCustomerPlansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     []CustomerPlan `json:"data"`
		NextPage *string        `json:"next_page"`
	}
}

// Status returns HTTPResponse.Status
func (r ListCustomerPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCustomerPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPlanToCustomerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Id `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r AddPlanToCustomerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPlanToCustomerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EndCustomerPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r EndCustomerPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EndCustomerPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlanPriceAdjustmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     []PriceAdjustment `json:"data"`
		NextPage *string           `json:"next_page"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPlanPriceAdjustmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlanPriceAdjustmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetIngestAliasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r SetIngestAliasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetIngestAliasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetCustomerNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data Customer `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r SetCustomerNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetCustomerNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCustomerConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateCustomerConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCustomerConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EmbeddableDashboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data struct {
			Url *string `json:"url,omitempty"`
		} `json:"data"`
	}
	JSON400 *Error
}

// Status returns HTTPResponse.Status
func (r EmbeddableDashboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EmbeddableDashboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type IngestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r IngestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r IngestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlanDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data PlanDetail `json:"data"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPlanDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlanDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlanChargesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     []PlanCharge `json:"data"`
		NextPage *string      `json:"next_page"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPlanChargesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlanChargesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     []Plan  `json:"data"`
		NextPage *string `json:"next_page"`
	}
}

// Status returns HTTPResponse.Status
func (r ListPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsageBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     []UsageBatchAggregate `json:"data"`
		NextPage *string               `json:"next_page"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUsageBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsageBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPagedUsageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data     []PagedUsageAggregate `json:"data"`
		NextPage *string               `json:"next_page"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPagedUsageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPagedUsageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ArchiveAlertWithBodyWithResponse request with arbitrary body returning *ArchiveAlertResponse
func (c *ClientWithResponses) ArchiveAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ArchiveAlertResponse, error) {
	rsp, err := c.ArchiveAlertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveAlertResponse(rsp)
}

func (c *ClientWithResponses) ArchiveAlertWithResponse(ctx context.Context, body ArchiveAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*ArchiveAlertResponse, error) {
	rsp, err := c.ArchiveAlert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveAlertResponse(rsp)
}

// CreateAlertWithBodyWithResponse request with arbitrary body returning *CreateAlertResponse
func (c *ClientWithResponses) CreateAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAlertResponse, error) {
	rsp, err := c.CreateAlertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlertResponse(rsp)
}

func (c *ClientWithResponses) CreateAlertWithResponse(ctx context.Context, body CreateAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAlertResponse, error) {
	rsp, err := c.CreateAlert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAlertResponse(rsp)
}

// ListCreditTypesWithResponse request returning *ListCreditTypesResponse
func (c *ClientWithResponses) ListCreditTypesWithResponse(ctx context.Context, params *ListCreditTypesParams, reqEditors ...RequestEditorFn) (*ListCreditTypesResponse, error) {
	rsp, err := c.ListCreditTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCreditTypesResponse(rsp)
}

// CreateGrantWithBodyWithResponse request with arbitrary body returning *CreateGrantResponse
func (c *ClientWithResponses) CreateGrantWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateGrantResponse, error) {
	rsp, err := c.CreateGrantWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGrantResponse(rsp)
}

func (c *ClientWithResponses) CreateGrantWithResponse(ctx context.Context, body CreateGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateGrantResponse, error) {
	rsp, err := c.CreateGrant(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateGrantResponse(rsp)
}

// ListCreditLedgerEntriesWithBodyWithResponse request with arbitrary body returning *ListCreditLedgerEntriesResponse
func (c *ClientWithResponses) ListCreditLedgerEntriesWithBodyWithResponse(ctx context.Context, params *ListCreditLedgerEntriesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListCreditLedgerEntriesResponse, error) {
	rsp, err := c.ListCreditLedgerEntriesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCreditLedgerEntriesResponse(rsp)
}

func (c *ClientWithResponses) ListCreditLedgerEntriesWithResponse(ctx context.Context, params *ListCreditLedgerEntriesParams, body ListCreditLedgerEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*ListCreditLedgerEntriesResponse, error) {
	rsp, err := c.ListCreditLedgerEntries(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCreditLedgerEntriesResponse(rsp)
}

// ListGrantsWithBodyWithResponse request with arbitrary body returning *ListGrantsResponse
func (c *ClientWithResponses) ListGrantsWithBodyWithResponse(ctx context.Context, params *ListGrantsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListGrantsResponse, error) {
	rsp, err := c.ListGrantsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGrantsResponse(rsp)
}

func (c *ClientWithResponses) ListGrantsWithResponse(ctx context.Context, params *ListGrantsParams, body ListGrantsJSONRequestBody, reqEditors ...RequestEditorFn) (*ListGrantsResponse, error) {
	rsp, err := c.ListGrants(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListGrantsResponse(rsp)
}

// VoidGrantWithBodyWithResponse request with arbitrary body returning *VoidGrantResponse
func (c *ClientWithResponses) VoidGrantWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VoidGrantResponse, error) {
	rsp, err := c.VoidGrantWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVoidGrantResponse(rsp)
}

func (c *ClientWithResponses) VoidGrantWithResponse(ctx context.Context, body VoidGrantJSONRequestBody, reqEditors ...RequestEditorFn) (*VoidGrantResponse, error) {
	rsp, err := c.VoidGrant(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVoidGrantResponse(rsp)
}

// AddCustomFieldKeyWithBodyWithResponse request with arbitrary body returning *AddCustomFieldKeyResponse
func (c *ClientWithResponses) AddCustomFieldKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddCustomFieldKeyResponse, error) {
	rsp, err := c.AddCustomFieldKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCustomFieldKeyResponse(rsp)
}

func (c *ClientWithResponses) AddCustomFieldKeyWithResponse(ctx context.Context, body AddCustomFieldKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*AddCustomFieldKeyResponse, error) {
	rsp, err := c.AddCustomFieldKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddCustomFieldKeyResponse(rsp)
}

// DeleteCustomFieldsWithBodyWithResponse request with arbitrary body returning *DeleteCustomFieldsResponse
func (c *ClientWithResponses) DeleteCustomFieldsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteCustomFieldsResponse, error) {
	rsp, err := c.DeleteCustomFieldsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomFieldsResponse(rsp)
}

func (c *ClientWithResponses) DeleteCustomFieldsWithResponse(ctx context.Context, body DeleteCustomFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteCustomFieldsResponse, error) {
	rsp, err := c.DeleteCustomFields(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCustomFieldsResponse(rsp)
}

// ListCustomFieldKeysWithBodyWithResponse request with arbitrary body returning *ListCustomFieldKeysResponse
func (c *ClientWithResponses) ListCustomFieldKeysWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListCustomFieldKeysResponse, error) {
	rsp, err := c.ListCustomFieldKeysWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomFieldKeysResponse(rsp)
}

func (c *ClientWithResponses) ListCustomFieldKeysWithResponse(ctx context.Context, body ListCustomFieldKeysJSONRequestBody, reqEditors ...RequestEditorFn) (*ListCustomFieldKeysResponse, error) {
	rsp, err := c.ListCustomFieldKeys(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomFieldKeysResponse(rsp)
}

// DisableCustomFieldKeyWithBodyWithResponse request with arbitrary body returning *DisableCustomFieldKeyResponse
func (c *ClientWithResponses) DisableCustomFieldKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DisableCustomFieldKeyResponse, error) {
	rsp, err := c.DisableCustomFieldKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisableCustomFieldKeyResponse(rsp)
}

func (c *ClientWithResponses) DisableCustomFieldKeyWithResponse(ctx context.Context, body DisableCustomFieldKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*DisableCustomFieldKeyResponse, error) {
	rsp, err := c.DisableCustomFieldKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisableCustomFieldKeyResponse(rsp)
}

// SetCustomFieldsWithBodyWithResponse request with arbitrary body returning *SetCustomFieldsResponse
func (c *ClientWithResponses) SetCustomFieldsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetCustomFieldsResponse, error) {
	rsp, err := c.SetCustomFieldsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetCustomFieldsResponse(rsp)
}

func (c *ClientWithResponses) SetCustomFieldsWithResponse(ctx context.Context, body SetCustomFieldsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetCustomFieldsResponse, error) {
	rsp, err := c.SetCustomFields(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetCustomFieldsResponse(rsp)
}

// GetCustomerAlertWithBodyWithResponse request with arbitrary body returning *GetCustomerAlertResponse
func (c *ClientWithResponses) GetCustomerAlertWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetCustomerAlertResponse, error) {
	rsp, err := c.GetCustomerAlertWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerAlertResponse(rsp)
}

func (c *ClientWithResponses) GetCustomerAlertWithResponse(ctx context.Context, body GetCustomerAlertJSONRequestBody, reqEditors ...RequestEditorFn) (*GetCustomerAlertResponse, error) {
	rsp, err := c.GetCustomerAlert(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerAlertResponse(rsp)
}

// ListCustomerAlertsWithBodyWithResponse request with arbitrary body returning *ListCustomerAlertsResponse
func (c *ClientWithResponses) ListCustomerAlertsWithBodyWithResponse(ctx context.Context, params *ListCustomerAlertsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListCustomerAlertsResponse, error) {
	rsp, err := c.ListCustomerAlertsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomerAlertsResponse(rsp)
}

func (c *ClientWithResponses) ListCustomerAlertsWithResponse(ctx context.Context, params *ListCustomerAlertsParams, body ListCustomerAlertsJSONRequestBody, reqEditors ...RequestEditorFn) (*ListCustomerAlertsResponse, error) {
	rsp, err := c.ListCustomerAlerts(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomerAlertsResponse(rsp)
}

// ListCustomersWithResponse request returning *ListCustomersResponse
func (c *ClientWithResponses) ListCustomersWithResponse(ctx context.Context, params *ListCustomersParams, reqEditors ...RequestEditorFn) (*ListCustomersResponse, error) {
	rsp, err := c.ListCustomers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomersResponse(rsp)
}

// CreateCustomerWithBodyWithResponse request with arbitrary body returning *CreateCustomerResponse
func (c *ClientWithResponses) CreateCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomerResponse, error) {
	rsp, err := c.CreateCustomerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomerResponse(rsp)
}

func (c *ClientWithResponses) CreateCustomerWithResponse(ctx context.Context, body CreateCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomerResponse, error) {
	rsp, err := c.CreateCustomer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomerResponse(rsp)
}

// ArchiveCustomerWithBodyWithResponse request with arbitrary body returning *ArchiveCustomerResponse
func (c *ClientWithResponses) ArchiveCustomerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ArchiveCustomerResponse, error) {
	rsp, err := c.ArchiveCustomerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveCustomerResponse(rsp)
}

func (c *ClientWithResponses) ArchiveCustomerWithResponse(ctx context.Context, body ArchiveCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*ArchiveCustomerResponse, error) {
	rsp, err := c.ArchiveCustomer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveCustomerResponse(rsp)
}

// GetCustomerWithResponse request returning *GetCustomerResponse
func (c *ClientWithResponses) GetCustomerWithResponse(ctx context.Context, customerId CustomerId, reqEditors ...RequestEditorFn) (*GetCustomerResponse, error) {
	rsp, err := c.GetCustomer(ctx, customerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomerResponse(rsp)
}

// ListBillableMetricsWithResponse request returning *ListBillableMetricsResponse
func (c *ClientWithResponses) ListBillableMetricsWithResponse(ctx context.Context, customerId CustomerId, params *ListBillableMetricsParams, reqEditors ...RequestEditorFn) (*ListBillableMetricsResponse, error) {
	rsp, err := c.ListBillableMetrics(ctx, customerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListBillableMetricsResponse(rsp)
}

// DeleteBillingConfigForCustomerWithResponse request returning *DeleteBillingConfigForCustomerResponse
func (c *ClientWithResponses) DeleteBillingConfigForCustomerWithResponse(ctx context.Context, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam, reqEditors ...RequestEditorFn) (*DeleteBillingConfigForCustomerResponse, error) {
	rsp, err := c.DeleteBillingConfigForCustomer(ctx, customerId, billingProviderTypeParam, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBillingConfigForCustomerResponse(rsp)
}

// GetBillingConfigWithResponse request returning *GetBillingConfigResponse
func (c *ClientWithResponses) GetBillingConfigWithResponse(ctx context.Context, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam, reqEditors ...RequestEditorFn) (*GetBillingConfigResponse, error) {
	rsp, err := c.GetBillingConfig(ctx, customerId, billingProviderTypeParam, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBillingConfigResponse(rsp)
}

// SetBillingConfigForCustomerWithBodyWithResponse request with arbitrary body returning *SetBillingConfigForCustomerResponse
func (c *ClientWithResponses) SetBillingConfigForCustomerWithBodyWithResponse(ctx context.Context, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetBillingConfigForCustomerResponse, error) {
	rsp, err := c.SetBillingConfigForCustomerWithBody(ctx, customerId, billingProviderTypeParam, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetBillingConfigForCustomerResponse(rsp)
}

func (c *ClientWithResponses) SetBillingConfigForCustomerWithResponse(ctx context.Context, customerId CustomerId, billingProviderTypeParam BillingProviderTypeParam, body SetBillingConfigForCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*SetBillingConfigForCustomerResponse, error) {
	rsp, err := c.SetBillingConfigForCustomer(ctx, customerId, billingProviderTypeParam, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetBillingConfigForCustomerResponse(rsp)
}

// GetCostsWithResponse request returning *GetCostsResponse
func (c *ClientWithResponses) GetCostsWithResponse(ctx context.Context, customerId CustomerId, params *GetCostsParams, reqEditors ...RequestEditorFn) (*GetCostsResponse, error) {
	rsp, err := c.GetCosts(ctx, customerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCostsResponse(rsp)
}

// ListInvoicesWithResponse request returning *ListInvoicesResponse
func (c *ClientWithResponses) ListInvoicesWithResponse(ctx context.Context, customerId CustomerId, params *ListInvoicesParams, reqEditors ...RequestEditorFn) (*ListInvoicesResponse, error) {
	rsp, err := c.ListInvoices(ctx, customerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInvoicesResponse(rsp)
}

// ListInvoicesCachedWithResponse request returning *ListInvoicesCachedResponse
func (c *ClientWithResponses) ListInvoicesCachedWithResponse(ctx context.Context, customerId CustomerId, params *ListInvoicesCachedParams, reqEditors ...RequestEditorFn) (*ListInvoicesCachedResponse, error) {
	rsp, err := c.ListInvoicesCached(ctx, customerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListInvoicesCachedResponse(rsp)
}

// GetInvoiceWithResponse request returning *GetInvoiceResponse
func (c *ClientWithResponses) GetInvoiceWithResponse(ctx context.Context, customerId CustomerId, invoiceId InvoiceId, reqEditors ...RequestEditorFn) (*GetInvoiceResponse, error) {
	rsp, err := c.GetInvoice(ctx, customerId, invoiceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInvoiceResponse(rsp)
}

// ListCustomerPlansWithResponse request returning *ListCustomerPlansResponse
func (c *ClientWithResponses) ListCustomerPlansWithResponse(ctx context.Context, customerId CustomerId, params *ListCustomerPlansParams, reqEditors ...RequestEditorFn) (*ListCustomerPlansResponse, error) {
	rsp, err := c.ListCustomerPlans(ctx, customerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCustomerPlansResponse(rsp)
}

// AddPlanToCustomerWithBodyWithResponse request with arbitrary body returning *AddPlanToCustomerResponse
func (c *ClientWithResponses) AddPlanToCustomerWithBodyWithResponse(ctx context.Context, customerId CustomerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPlanToCustomerResponse, error) {
	rsp, err := c.AddPlanToCustomerWithBody(ctx, customerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPlanToCustomerResponse(rsp)
}

func (c *ClientWithResponses) AddPlanToCustomerWithResponse(ctx context.Context, customerId CustomerId, body AddPlanToCustomerJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPlanToCustomerResponse, error) {
	rsp, err := c.AddPlanToCustomer(ctx, customerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPlanToCustomerResponse(rsp)
}

// EndCustomerPlanWithBodyWithResponse request with arbitrary body returning *EndCustomerPlanResponse
func (c *ClientWithResponses) EndCustomerPlanWithBodyWithResponse(ctx context.Context, customerId CustomerId, customerPlanId CustomerPlanId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EndCustomerPlanResponse, error) {
	rsp, err := c.EndCustomerPlanWithBody(ctx, customerId, customerPlanId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndCustomerPlanResponse(rsp)
}

func (c *ClientWithResponses) EndCustomerPlanWithResponse(ctx context.Context, customerId CustomerId, customerPlanId CustomerPlanId, body EndCustomerPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*EndCustomerPlanResponse, error) {
	rsp, err := c.EndCustomerPlan(ctx, customerId, customerPlanId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEndCustomerPlanResponse(rsp)
}

// GetPlanPriceAdjustmentsWithResponse request returning *GetPlanPriceAdjustmentsResponse
func (c *ClientWithResponses) GetPlanPriceAdjustmentsWithResponse(ctx context.Context, customerId CustomerId, customerPlanId CustomerPlanId, params *GetPlanPriceAdjustmentsParams, reqEditors ...RequestEditorFn) (*GetPlanPriceAdjustmentsResponse, error) {
	rsp, err := c.GetPlanPriceAdjustments(ctx, customerId, customerPlanId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlanPriceAdjustmentsResponse(rsp)
}

// SetIngestAliasesWithBodyWithResponse request with arbitrary body returning *SetIngestAliasesResponse
func (c *ClientWithResponses) SetIngestAliasesWithBodyWithResponse(ctx context.Context, customerId CustomerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetIngestAliasesResponse, error) {
	rsp, err := c.SetIngestAliasesWithBody(ctx, customerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetIngestAliasesResponse(rsp)
}

func (c *ClientWithResponses) SetIngestAliasesWithResponse(ctx context.Context, customerId CustomerId, body SetIngestAliasesJSONRequestBody, reqEditors ...RequestEditorFn) (*SetIngestAliasesResponse, error) {
	rsp, err := c.SetIngestAliases(ctx, customerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetIngestAliasesResponse(rsp)
}

// SetCustomerNameWithBodyWithResponse request with arbitrary body returning *SetCustomerNameResponse
func (c *ClientWithResponses) SetCustomerNameWithBodyWithResponse(ctx context.Context, customerId CustomerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetCustomerNameResponse, error) {
	rsp, err := c.SetCustomerNameWithBody(ctx, customerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetCustomerNameResponse(rsp)
}

func (c *ClientWithResponses) SetCustomerNameWithResponse(ctx context.Context, customerId CustomerId, body SetCustomerNameJSONRequestBody, reqEditors ...RequestEditorFn) (*SetCustomerNameResponse, error) {
	rsp, err := c.SetCustomerName(ctx, customerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetCustomerNameResponse(rsp)
}

// UpdateCustomerConfigWithBodyWithResponse request with arbitrary body returning *UpdateCustomerConfigResponse
func (c *ClientWithResponses) UpdateCustomerConfigWithBodyWithResponse(ctx context.Context, customerId CustomerId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCustomerConfigResponse, error) {
	rsp, err := c.UpdateCustomerConfigWithBody(ctx, customerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomerConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateCustomerConfigWithResponse(ctx context.Context, customerId CustomerId, body UpdateCustomerConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCustomerConfigResponse, error) {
	rsp, err := c.UpdateCustomerConfig(ctx, customerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCustomerConfigResponse(rsp)
}

// EmbeddableDashboardWithBodyWithResponse request with arbitrary body returning *EmbeddableDashboardResponse
func (c *ClientWithResponses) EmbeddableDashboardWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EmbeddableDashboardResponse, error) {
	rsp, err := c.EmbeddableDashboardWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmbeddableDashboardResponse(rsp)
}

func (c *ClientWithResponses) EmbeddableDashboardWithResponse(ctx context.Context, body EmbeddableDashboardJSONRequestBody, reqEditors ...RequestEditorFn) (*EmbeddableDashboardResponse, error) {
	rsp, err := c.EmbeddableDashboard(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEmbeddableDashboardResponse(rsp)
}

// IngestWithBodyWithResponse request with arbitrary body returning *IngestResponse
func (c *ClientWithResponses) IngestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*IngestResponse, error) {
	rsp, err := c.IngestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIngestResponse(rsp)
}

func (c *ClientWithResponses) IngestWithResponse(ctx context.Context, body IngestJSONRequestBody, reqEditors ...RequestEditorFn) (*IngestResponse, error) {
	rsp, err := c.Ingest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseIngestResponse(rsp)
}

// GetPlanDetailsWithResponse request returning *GetPlanDetailsResponse
func (c *ClientWithResponses) GetPlanDetailsWithResponse(ctx context.Context, planId PlanId, reqEditors ...RequestEditorFn) (*GetPlanDetailsResponse, error) {
	rsp, err := c.GetPlanDetails(ctx, planId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlanDetailsResponse(rsp)
}

// GetPlanChargesWithResponse request returning *GetPlanChargesResponse
func (c *ClientWithResponses) GetPlanChargesWithResponse(ctx context.Context, planId PlanId, params *GetPlanChargesParams, reqEditors ...RequestEditorFn) (*GetPlanChargesResponse, error) {
	rsp, err := c.GetPlanCharges(ctx, planId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlanChargesResponse(rsp)
}

// ListPlansWithResponse request returning *ListPlansResponse
func (c *ClientWithResponses) ListPlansWithResponse(ctx context.Context, params *ListPlansParams, reqEditors ...RequestEditorFn) (*ListPlansResponse, error) {
	rsp, err := c.ListPlans(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPlansResponse(rsp)
}

// GetUsageBatchWithBodyWithResponse request with arbitrary body returning *GetUsageBatchResponse
func (c *ClientWithResponses) GetUsageBatchWithBodyWithResponse(ctx context.Context, params *GetUsageBatchParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetUsageBatchResponse, error) {
	rsp, err := c.GetUsageBatchWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsageBatchResponse(rsp)
}

func (c *ClientWithResponses) GetUsageBatchWithResponse(ctx context.Context, params *GetUsageBatchParams, body GetUsageBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*GetUsageBatchResponse, error) {
	rsp, err := c.GetUsageBatch(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsageBatchResponse(rsp)
}

// GetPagedUsageWithBodyWithResponse request with arbitrary body returning *GetPagedUsageResponse
func (c *ClientWithResponses) GetPagedUsageWithBodyWithResponse(ctx context.Context, params *GetPagedUsageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetPagedUsageResponse, error) {
	rsp, err := c.GetPagedUsageWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPagedUsageResponse(rsp)
}

func (c *ClientWithResponses) GetPagedUsageWithResponse(ctx context.Context, params *GetPagedUsageParams, body GetPagedUsageJSONRequestBody, reqEditors ...RequestEditorFn) (*GetPagedUsageResponse, error) {
	rsp, err := c.GetPagedUsage(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPagedUsageResponse(rsp)
}

// ParseArchiveAlertResponse parses an HTTP response from a ArchiveAlertWithResponse call
func ParseArchiveAlertResponse(rsp *http.Response) (*ArchiveAlertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Id `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCreateAlertResponse parses an HTTP response from a CreateAlertWithResponse call
func ParseCreateAlertResponse(rsp *http.Response) (*CreateAlertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Id `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListCreditTypesResponse parses an HTTP response from a ListCreditTypesWithResponse call
func ParseListCreditTypesResponse(rsp *http.Response) (*ListCreditTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCreditTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []struct {
				Id         *openapi_types.UUID `json:"id,omitempty"`
				IsCurrency *bool               `json:"is_currency,omitempty"`
				Name       *string             `json:"name,omitempty"`
			} `json:"data"`
			NextPage *string `json:"next_page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateGrantResponse parses an HTTP response from a CreateGrantWithResponse call
func ParseCreateGrantResponse(rsp *http.Response) (*CreateGrantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateGrantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Id `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListCreditLedgerEntriesResponse parses an HTTP response from a ListCreditLedgerEntriesWithResponse call
func ParseListCreditLedgerEntriesResponse(rsp *http.Response) (*ListCreditLedgerEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCreditLedgerEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     []CustomerCreditTypeLedger `json:"data"`
			NextPage *string                    `json:"next_page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListGrantsResponse parses an HTTP response from a ListGrantsWithResponse call
func ParseListGrantsResponse(rsp *http.Response) (*ListGrantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListGrantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     []CreditGrant `json:"data"`
			NextPage *string       `json:"next_page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVoidGrantResponse parses an HTTP response from a VoidGrantWithResponse call
func ParseVoidGrantResponse(rsp *http.Response) (*VoidGrantResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VoidGrantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Id `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAddCustomFieldKeyResponse parses an HTTP response from a AddCustomFieldKeyWithResponse call
func ParseAddCustomFieldKeyResponse(rsp *http.Response) (*AddCustomFieldKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddCustomFieldKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteCustomFieldsResponse parses an HTTP response from a DeleteCustomFieldsWithResponse call
func ParseDeleteCustomFieldsResponse(rsp *http.Response) (*DeleteCustomFieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCustomFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListCustomFieldKeysResponse parses an HTTP response from a ListCustomFieldKeysWithResponse call
func ParseListCustomFieldKeysResponse(rsp *http.Response) (*ListCustomFieldKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomFieldKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []struct {
				EnforceUniqueness bool          `json:"enforce_uniqueness"`
				Entity            ManagedEntity `json:"entity"`
				Key               string        `json:"key"`
			} `json:"data"`
			NextPage *string `json:"next_page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDisableCustomFieldKeyResponse parses an HTTP response from a DisableCustomFieldKeyWithResponse call
func ParseDisableCustomFieldKeyResponse(rsp *http.Response) (*DisableCustomFieldKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DisableCustomFieldKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSetCustomFieldsResponse parses an HTTP response from a SetCustomFieldsWithResponse call
func ParseSetCustomFieldsResponse(rsp *http.Response) (*SetCustomFieldsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetCustomFieldsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCustomerAlertResponse parses an HTTP response from a GetCustomerAlertWithResponse call
func ParseGetCustomerAlertResponse(rsp *http.Response) (*GetCustomerAlertResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerAlertResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data CustomerAlert `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListCustomerAlertsResponse parses an HTTP response from a ListCustomerAlertsWithResponse call
func ParseListCustomerAlertsResponse(rsp *http.Response) (*ListCustomerAlertsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomerAlertsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     []CustomerAlert `json:"data"`
			NextPage *string         `json:"next_page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListCustomersResponse parses an HTTP response from a ListCustomersWithResponse call
func ParseListCustomersResponse(rsp *http.Response) (*ListCustomersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     []CustomerDetail `json:"data"`
			NextPage *string          `json:"next_page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCustomerResponse parses an HTTP response from a CreateCustomerWithResponse call
func ParseCreateCustomerResponse(rsp *http.Response) (*CreateCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Customer `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseArchiveCustomerResponse parses an HTTP response from a ArchiveCustomerWithResponse call
func ParseArchiveCustomerResponse(rsp *http.Response) (*ArchiveCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Id `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCustomerResponse parses an HTTP response from a GetCustomerWithResponse call
func ParseGetCustomerResponse(rsp *http.Response) (*GetCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data CustomerDetail `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListBillableMetricsResponse parses an HTTP response from a ListBillableMetricsWithResponse call
func ParseListBillableMetricsResponse(rsp *http.Response) (*ListBillableMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListBillableMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     []BillableMetric `json:"data"`
			NextPage *string          `json:"next_page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteBillingConfigForCustomerResponse parses an HTTP response from a DeleteBillingConfigForCustomerWithResponse call
func ParseDeleteBillingConfigForCustomerResponse(rsp *http.Response) (*DeleteBillingConfigForCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBillingConfigForCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetBillingConfigResponse parses an HTTP response from a GetBillingConfigWithResponse call
func ParseGetBillingConfigResponse(rsp *http.Response) (*GetBillingConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBillingConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				// AwsExpirationDate Contract expiration date for the customer. The expected format is RFC 3339 and can be retrieved from AWS's GetEntitlements API. (See https://docs.aws.amazon.com/marketplaceentitlement/latest/APIReference/API_GetEntitlements.html.)
				AwsExpirationDate         *AwsExpirationDate      `json:"aws_expiration_date,omitempty"`
				AwsProductCode            *string                 `json:"aws_product_code,omitempty"`
				AwsRegion                 *AwsRegion              `json:"aws_region,omitempty"`
				BillingProviderCustomerId *string                 `json:"billing_provider_customer_id,omitempty"`
				StripeCollectionMethod    *StripeCollectionMethod `json:"stripe_collection_method,omitempty"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSetBillingConfigForCustomerResponse parses an HTTP response from a SetBillingConfigForCustomerWithResponse call
func ParseSetBillingConfigForCustomerResponse(rsp *http.Response) (*SetBillingConfigForCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetBillingConfigForCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetCostsResponse parses an HTTP response from a GetCostsWithResponse call
func ParseGetCostsResponse(rsp *http.Response) (*GetCostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     []Costs `json:"data"`
			NextPage *string `json:"next_page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListInvoicesResponse parses an HTTP response from a ListInvoicesWithResponse call
func ParseListInvoicesResponse(rsp *http.Response) (*ListInvoicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInvoicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     []Invoice `json:"data"`
			NextPage *string   `json:"next_page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListInvoicesCachedResponse parses an HTTP response from a ListInvoicesCachedWithResponse call
func ParseListInvoicesCachedResponse(rsp *http.Response) (*ListInvoicesCachedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInvoicesCachedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     []Invoice `json:"data"`
			NextPage *string   `json:"next_page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetInvoiceResponse parses an HTTP response from a GetInvoiceWithResponse call
func ParseGetInvoiceResponse(rsp *http.Response) (*GetInvoiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInvoiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Invoice `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseListCustomerPlansResponse parses an HTTP response from a ListCustomerPlansWithResponse call
func ParseListCustomerPlansResponse(rsp *http.Response) (*ListCustomerPlansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCustomerPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     []CustomerPlan `json:"data"`
			NextPage *string        `json:"next_page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddPlanToCustomerResponse parses an HTTP response from a AddPlanToCustomerWithResponse call
func ParseAddPlanToCustomerResponse(rsp *http.Response) (*AddPlanToCustomerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPlanToCustomerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Id `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEndCustomerPlanResponse parses an HTTP response from a EndCustomerPlanWithResponse call
func ParseEndCustomerPlanResponse(rsp *http.Response) (*EndCustomerPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EndCustomerPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlanPriceAdjustmentsResponse parses an HTTP response from a GetPlanPriceAdjustmentsWithResponse call
func ParseGetPlanPriceAdjustmentsResponse(rsp *http.Response) (*GetPlanPriceAdjustmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlanPriceAdjustmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     []PriceAdjustment `json:"data"`
			NextPage *string           `json:"next_page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetIngestAliasesResponse parses an HTTP response from a SetIngestAliasesWithResponse call
func ParseSetIngestAliasesResponse(rsp *http.Response) (*SetIngestAliasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetIngestAliasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseSetCustomerNameResponse parses an HTTP response from a SetCustomerNameWithResponse call
func ParseSetCustomerNameResponse(rsp *http.Response) (*SetCustomerNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetCustomerNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data Customer `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCustomerConfigResponse parses an HTTP response from a UpdateCustomerConfigWithResponse call
func ParseUpdateCustomerConfigResponse(rsp *http.Response) (*UpdateCustomerConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCustomerConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseEmbeddableDashboardResponse parses an HTTP response from a EmbeddableDashboardWithResponse call
func ParseEmbeddableDashboardResponse(rsp *http.Response) (*EmbeddableDashboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EmbeddableDashboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data struct {
				Url *string `json:"url,omitempty"`
			} `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseIngestResponse parses an HTTP response from a IngestWithResponse call
func ParseIngestResponse(rsp *http.Response) (*IngestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &IngestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPlanDetailsResponse parses an HTTP response from a GetPlanDetailsWithResponse call
func ParseGetPlanDetailsResponse(rsp *http.Response) (*GetPlanDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlanDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data PlanDetail `json:"data"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPlanChargesResponse parses an HTTP response from a GetPlanChargesWithResponse call
func ParseGetPlanChargesResponse(rsp *http.Response) (*GetPlanChargesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlanChargesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     []PlanCharge `json:"data"`
			NextPage *string      `json:"next_page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListPlansResponse parses an HTTP response from a ListPlansWithResponse call
func ParseListPlansResponse(rsp *http.Response) (*ListPlansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     []Plan  `json:"data"`
			NextPage *string `json:"next_page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsageBatchResponse parses an HTTP response from a GetUsageBatchWithResponse call
func ParseGetUsageBatchResponse(rsp *http.Response) (*GetUsageBatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsageBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     []UsageBatchAggregate `json:"data"`
			NextPage *string               `json:"next_page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPagedUsageResponse parses an HTTP response from a GetPagedUsageWithResponse call
func ParseGetPagedUsageResponse(rsp *http.Response) (*GetPagedUsageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPagedUsageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data     []PagedUsageAggregate `json:"data"`
			NextPage *string               `json:"next_page"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"e1mG/+PD/w8AAP//+RrGVjQsAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
